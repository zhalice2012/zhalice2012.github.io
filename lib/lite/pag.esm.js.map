{"version":3,"file":"pag.esm.js","sources":["../src/base/utils/clock.ts","../src/codec/types.ts","../src/codec/tags/tag-header.ts","../src/constant.ts","../src/base/color.ts","../src/base/utils/verify.ts","../src/base/composition.ts","../src/base/video-composition.ts","../src/base/ratio.ts","../src/base/point.ts","../src/base/layer.ts","../src/codec/data-types.ts","../src/codec/tags/composition-attributes.ts","../src/codec/context.ts","../src/base/utils/error-map.ts","../src/codec/utils/byte-array.ts","../src/base/byte-data.ts","../src/base/video-frame.ts","../src/base/sequence.ts","../src/base/video-sequence.ts","../src/codec/utils/byte-utils.ts","../src/codec/nalu-start-code.ts","../src/codec/tags/video-sequence-tag.ts","../src/codec/tags/video-composition-tag.ts","../src/base/effects/effect.ts","../src/base/time-range.ts","../src/base/vector-composition.ts","../src/base/property.ts","../src/base/transform-2d.ts","../src/base/pre-compose-layer.ts","../src/base/shape-layer.ts","../src/base/solid-layer.ts","../src/base/un-defined-layer.ts","../src/base/keyframe.ts","../src/base/animatable-property.ts","../src/codec/attribute-helper.ts","../src/codec/tags/solid-layer.ts","../src/base/utils/interpolate.ts","../src/base/utils/interpolator.ts","../src/base/keyframes/multi-dimension-point-keyframe.ts","../src/base/keyframes/single-ease-keyframe.ts","../src/codec/attributes.ts","../src/codec/tags/tag-attributes.ts","../src/codec/tags/read-composition-reference.ts","../src/codec/tags/layer-tag.ts","../src/codec/tags/vector-composition-tag.ts","../src/codec/tags/file-tags.ts","../src/pag-codec.ts","../src/pag-file.ts","../src/types.ts","../src/decorators.ts","../src/view/utils.ts","../src/base/utils/event-manager.ts","../src/view/context.ts","../src/generator/mp4-generator.ts","../src/generator/mp4-box-helper.ts","../src/view/video-listener.ts","../src/view/video-reader.ts","../src/view/view.ts","../src/view/pag-2d-view.ts","../src/view/shader.ts","../src/view/pag-webgl-view.ts","../src/pag-view.ts"],"sourcesContent":["let getTime: () => number;\ntry {\n  getTime = performance.now.bind(performance);\n} catch (e) {\n  getTime = Date.now;\n}\n\nexport class Clock {\n  private startTime: number;\n  private markers: { [key: string]: number };\n\n  public constructor() {\n    this.startTime = getTime();\n    this.markers = {};\n  }\n\n  public reset() {\n    this.startTime = getTime();\n    this.markers = {};\n  }\n\n  public mark(key: string) {\n    if (!key) {\n      console.log('Clock.mark(): An empty marker name was specified!');\n      return;\n    }\n    if (Object.keys(this.markers).find((markerKey) => markerKey === key)) {\n      console.log(`Clock.mark(): The specified marker name '${key}' already exists!`);\n      return;\n    }\n    this.markers[key] = getTime();\n  }\n\n  public measure(makerFrom: string, makerTo: string) {\n    let start;\n    let end;\n    if (!makerFrom) {\n      start = this.startTime;\n    } else {\n      if (!Object.keys(this.markers).find((markerKey) => markerKey === makerFrom)) {\n        console.log(`Clock.measure(): The specified makerFrom '${makerFrom}' does not exist!`);\n        return 0;\n      }\n      start = this.markers[makerFrom];\n    }\n    if (!makerTo) {\n      end = getTime();\n    } else {\n      if (!Object.keys(this.markers).find((markerKey) => markerKey === makerTo)) {\n        console.log(`Clock.measure(): The specified makerTo '${makerTo}' does not exist!`);\n        return 0;\n      }\n      end = this.markers[makerTo];\n    }\n    return end - start;\n  }\n}\n","export const enum CompositionType {\n  Unknown,\n  Vector,\n  Bitmap,\n  Video,\n}\n\nexport const enum TagCode {\n  End = 0,\n  FontTables = 1,\n  VectorCompositionBlock = 2,\n  CompositionAttributes = 3,\n  ImageTables = 4,\n  LayerBlock = 5,\n  LayerAttributes = 6,\n  SolidColor = 7,\n  TextSource = 8,\n  TextPathOption = 9,\n  TextMoreOption = 10,\n  ImageReference = 11,\n  CompositionReference = 12,\n  Transform2D = 13,\n  MaskBlock = 14,\n  ShapeGroup = 15,\n  Rectangle = 16,\n  Ellipse = 17,\n  PolyStar = 18,\n  ShapePath = 19,\n  Fill = 20,\n  Stroke = 21,\n  GradientFill = 22,\n  GradientStroke = 23,\n  MergePaths = 24,\n  TrimPaths = 25,\n  Repeater = 26,\n  RoundCorners = 27,\n  Performance = 28,\n  DropShadowStyle = 29,\n  InnerShadowStyle = 30,\n  OuterGlowStyle = 31,\n  InnerGlowStyle = 32,\n  BevelAndEmbossStyle = 33,\n  SatinStyle = 34,\n  ColorOverlayStyle = 35,\n  GradientOverlayStyle = 36,\n  StrokeStyle = 37,\n  TintEffect = 38,\n  FillEffect = 39,\n  StrokeEffect = 40,\n  TritoneEffect = 41,\n  DropShadowEffect = 42,\n  RadialWipeEffect = 43,\n  DisplacementMapEffect = 44,\n  BitmapCompositionBlock = 45,\n  BitmapSequence = 46,\n  ImageBytes = 47,\n  ImageBytes2 = 48,\n  ImageBytes3 = 49,\n  VideoCompositionBlock = 50,\n  VideoSequence = 51,\n  LayerAttributesV2 = 52,\n  // add new tags here...\n  Count,\n}\n","import { TagCode } from '../types';\n\nimport type { ByteArray } from '../utils/byte-array';\n\nexport interface TagHeader {\n  code: TagCode;\n  length: number;\n}\n\nexport const readTagHeader = (byteBuffer: ByteArray): TagHeader => {\n  const codeAndLength: number = byteBuffer.readUint16();\n  let length: number = (codeAndLength & 63) >>> 0;\n  const code: number = codeAndLength >> 6;\n  if (length === 63) {\n    length = byteBuffer.readUint32();\n  }\n  if (byteBuffer.context.tagLevel < code) {\n    byteBuffer.context.tagLevel = code;\n  }\n  return { code, length };\n};\n\nexport function readTags<T>(byteArray: ByteArray, parameter: T, reader: Function) {\n  let header = readTagHeader(byteArray);\n  while (header.code !== TagCode.End) {\n    const tagBytes = byteArray.readBytes(header.length);\n    reader(tagBytes, header.code, parameter);\n    if (byteArray.context.tagLevel < tagBytes.context.tagLevel) {\n      byteArray.context.tagLevel = tagBytes.context.tagLevel;\n    }\n    header = readTagHeader(byteArray);\n  }\n}\n","export const ZERO_ID = 0;\nexport const ZERO_TIME = 0;\nexport const OPAQUE = 255;\nexport const TRANSPARENT = 0;\n\n/**\n * Default WebGL ContextAttributes\n */\nexport const WEBGL_CONTEXT_ATTRIBUTES = {\n  alpha: true,\n  depth: false,\n  stencil: false,\n  antialias: true,\n};\n\n// 混合模式\nexport const enum BlendMode {\n  Normal = 0,\n  Multiply = 1,\n  Screen = 2,\n  Overlay = 3,\n  Darken = 4,\n  Lighten = 5,\n  ColorDodge = 6,\n  ColorBurn = 7,\n  HardLight = 8,\n  SoftLight = 9,\n  Difference = 10,\n  Exclusion = 11,\n  Hue = 12,\n  Saturation = 13,\n  Color = 14,\n  Luminosity = 15,\n\n  // modes used only when rendering.\n  DestinationIn = 21,\n  DestinationOut = 22,\n  DestinationATop = 23,\n  SourceIn = 24,\n  SourceOut = 25,\n  Xor = 26,\n}\n\n// 路径动作\nexport const enum PathVerb {\n  MoveTo,\n  LineTo,\n  CurveTo,\n  Close,\n}\n\n// 关键帧的差值器类型\nexport const enum KeyframeInterpolationType {\n  None = 0,\n  Linear = 1,\n  Bezier = 2,\n  Hold = 3,\n}\n\n// 段落对齐\nexport const enum ParagraphJustification {\n  LeftJustify = 0,\n  CenterJustify = 1,\n  RightJustify = 2,\n  FullJustifyLastLineLeft = 3,\n  FullJustifyLastLineRight = 4,\n  FullJustifyLastLineCenter = 5,\n  FullJustifyLastLineFull = 6,\n}\n\nexport const IS_IOS = navigator && /(ios|ipad|iphone)/.test(navigator.userAgent.toLowerCase());\n","export interface Color {\n  red: number; // in the range [0 - 255]\n  green: number;\n  blue: number;\n}\n\nexport const Black: Color = { red: 0, green: 0, blue: 0 };\nexport const White: Color = { red: 255, green: 255, blue: 255 };\nexport const Red: Color = { red: 255, green: 0, blue: 0 };\nexport const Green: Color = { red: 0, green: 255, blue: 0 };\nexport const Blue: Color = { red: 0, green: 0, blue: 255 };\n","export const verifyFailed = () => {\n  console.error('PAG Verify Failed!');\n};\n\nexport const verifyAndReturn = (expression: boolean): boolean => {\n  if (expression) {\n    return true;\n  }\n  console.error('PAG Verify Failed!');\n  return false;\n};\n","import { ZERO_ID, ZERO_TIME } from '../constant';\nimport { Color, White } from './color';\nimport { CompositionType } from '../codec/types';\nimport { TimeRange } from './time-range';\nimport { verifyAndReturn } from './utils/verify';\n\nexport class Composition {\n  private static cacheIDCount = 1;\n\n  /**\n   * A unique identifier for this item.\n   */\n  public id: number = ZERO_ID;\n  /**\n   * The width of the Composition.\n   */\n  public width = 0;\n  /**\n   * The height of the item.\n   */\n  public height = 0;\n  /**\n   * The total duration of the item.\n   */\n  public duration: number = ZERO_TIME;\n  /**\n   * The frame rate of the Composition.\n   */\n  public frameRate = 30;\n  /**\n   * The background color of the composition.\n   */\n  public backgroundColor: Color = White;\n  public cacheID = 0;\n\n  public constructor() {\n    this.cacheID = Composition.cacheIDCount;\n    Composition.cacheIDCount += 1;\n  }\n\n  /**\n   * The type of the Composition.\n   */\n  public type(): CompositionType {\n    return CompositionType.Unknown;\n  }\n\n  /**\n   * Returns the static time ranges of this composition.\n   */\n  public getStaticTimeRanges(): Array<TimeRange> {\n    return [];\n  }\n\n  public verify(): boolean {\n    return verifyAndReturn(this.width > 0 && this.height > 0 && this.duration > 0 && this.frameRate > 0);\n  }\n}\n","import { Composition } from './composition';\nimport { CompositionType } from '../codec/types';\nimport { TimeRange } from './time-range';\nimport { VideoSequence } from './video-sequence';\nimport { verifyFailed } from './utils/verify';\n\nexport class VideoComposition extends Composition {\n  public hasAlpha = false;\n  public sequences: Array<VideoSequence> = [];\n\n  private staticTimeRanges: Array<TimeRange> = [];\n  private staticTimeRangeUpdated = false;\n\n  public type(): CompositionType {\n    return CompositionType.Video;\n  }\n\n  public getStaticTimeRanges(): Array<TimeRange> {\n    if (!this.staticTimeRangeUpdated) {\n      this.staticTimeRangeUpdated = true;\n      this.updateStaticTimeRanges();\n    }\n    return this.staticTimeRanges;\n  }\n\n  public updateStaticTimeRanges(): void {\n    if (this.duration <= 1) return;\n    if (this.sequences.length > 0) {\n      let sequence = this.sequences[0];\n      for (let i = 1; i < this.sequences.length; i++) {\n        const item = this.sequences[i];\n        if (item.frameRate > sequence.frameRate) sequence = item;\n      }\n      const timeScale = this.frameRate / sequence.frameRate;\n      for (const timeRange of sequence.staticTimeRanges) {\n        timeRange.start = Math.round(timeRange.start * timeScale);\n        timeRange.end = Math.round(timeRange.end * timeScale);\n        this.staticTimeRanges.push(timeRange);\n      }\n    } else {\n      const range: TimeRange = { start: 0, end: this.duration - 1 };\n      this.staticTimeRanges.push(range);\n    }\n  }\n\n  public hasImageContent(): boolean {\n    return true;\n  }\n\n  public verify(): boolean {\n    if (!super.verify() || this.sequences.length <= 0) {\n      verifyFailed();\n      return false;\n    }\n    for (const sequence of this.sequences) {\n      if (!sequence || !sequence.verify()) {\n        verifyFailed();\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","export class Ratio {\n  public numerator = 1;\n  public denominator = 1;\n\n  public constructor(numerator: number, denominator: number) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public value(): number {\n    return this.numerator / this.denominator;\n  }\n}\n\nexport const DefaultRatio = new Ratio(1, 1);\n","export class Point {\n  public x: number;\n  public y: number;\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport const ZERO_POINT = new Point(0, 0);\n","import { TimeRange } from './time-range';\nimport { VectorComposition } from './vector-composition';\nimport { Ratio, DefaultRatio } from './ratio';\nimport { BlendMode, ZERO_ID, ZERO_TIME } from '../constant';\nimport { Transform2D } from './transform-2d';\nimport { Property } from './property';\nimport { Mask } from './mask';\nimport { Effect } from './effects/effect';\nimport { Point } from './point';\nimport { verifyFailed } from './utils/verify';\nimport { AnimatableProperty } from './animatable-property';\n\nexport const enum LayerStyleType {\n  Unknown,\n  DropShadow,\n  Stroke,\n}\n\nexport class LayerStyle {\n  public type(): LayerStyleType {\n    return LayerStyleType.Unknown;\n  }\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_time: number): void {}\n\n  public verify(): boolean {\n    return false;\n  }\n}\n\nexport const enum TrackMatteType {\n  None = 0,\n  Alpha = 1,\n  AlphaInverted = 2,\n  Luma = 3,\n  LumaInverted = 4,\n}\n\nexport const enum LayerType {\n  Unknown,\n  undefined,\n  Solid,\n  Text,\n  Shape,\n  Image,\n  PreCompose,\n}\n\nexport class Layer {\n  /**\n   * Te id of the layer.\n   */\n  public id = 0;\n  /**\n   * The parent of this layer.\n   */\n  public parent: Layer | undefined = undefined; // layer reference\n\n  public containingComposition: VectorComposition | undefined = undefined; // composition reference\n\n  /**\n   * The time stretch percentage of the layer.\n   */\n  public stretch: Ratio = DefaultRatio;\n  /**\n   * The start time of the layer, indicates the start position of the visible range. It could be a negative value.\n   */\n  public startTime = ZERO_ID;\n  /**\n   * The duration of the layer, indicates the length of the visible range.\n   */\n  public duration: number = ZERO_TIME;\n  /**\n   * When true, the layer' automatic orientation is enabled.\n   */\n  public autoOrientation = false;\n  /**\n   * The transformation of the layer.\n   */\n  public transform: Transform2D | undefined = undefined;\n  /**\n   * When false, the layer should be skipped during the rendering loop.\n   */\n  public isActive = true;\n  /**\n   * The blending mode of the layer.\n   */\n  public blendMode: BlendMode = BlendMode.Normal;\n  /**\n   * If layer has a track matte, specifies the way it is applied.\n   */\n  public trackMatteType: TrackMatteType = TrackMatteType.None;\n  public trackMatteLayer: Layer | undefined = undefined;\n  public timeRemap: Property<number> | undefined = undefined;\n  public masks: Array<Mask> | undefined = undefined;\n  public effects: Array<Effect> | undefined = undefined;\n  public layerStyles: Array<LayerStyle> | undefined = undefined;\n\n  public layerCache: Cache | undefined = undefined;\n\n  private maxScale: Point | undefined = undefined;\n\n  public type(): LayerType {\n    return LayerType.Unknown;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    this.transform?.excludeVaryingRanges(timeRanges);\n    if (this.timeRemap !== undefined) {\n      this.timeRemap.excludeVaryingRanges(timeRanges);\n    }\n    if (this.masks !== undefined) {\n      for (const mask of this.masks) {\n        mask.excludeVaryingRanges(timeRanges);\n      }\n    }\n    if (this.effects !== undefined && this.effects.length > 0) {\n      for (const effect of this.effects) {\n        effect.excludeVaryingRanges(timeRanges);\n      }\n    }\n    if (this.layerStyles !== undefined && this.layerStyles.length > 0) {\n      for (const layerStyle of this.layerStyles) {\n        layerStyle.excludeVaryingRanges(timeRanges);\n      }\n    }\n  }\n\n  public gotoFrame(frame: number): void {\n    this.transform?.gotoFrame(frame);\n    if (this.timeRemap !== undefined) {\n      this.timeRemap.gotoFrame(frame);\n    }\n    if (this.masks !== undefined && this.masks.length > 0) {\n      for (const mask of this.masks) {\n        mask.gotoFrame(frame);\n      }\n    }\n    if (this.effects !== undefined && this.effects.length > 0) {\n      for (const effect of this.effects) {\n        effect.gotoFrame(frame);\n      }\n    }\n    if (this.layerStyles !== undefined && this.layerStyles.length > 0) {\n      for (const layerStyle of this.layerStyles) {\n        layerStyle.gotoFrame(frame);\n      }\n    }\n  }\n\n  public verify(): boolean {\n    if (!this.containingComposition || this.duration <= 0 || !this.transform) {\n      verifyFailed();\n      return false;\n    }\n    if (!this.transform.verify()) {\n      verifyFailed();\n      return false;\n    }\n    if (this.masks && this.masks.length > 0) {\n      for (const mask of this.masks) {\n        if (!mask || !mask.verify()) {\n          verifyFailed();\n          return false;\n        }\n      }\n    }\n\n    if (this.layerStyles && this.layerStyles.length > 0) {\n      for (const layerStyle of this.layerStyles) {\n        if (!layerStyle || !layerStyle.verify()) {\n          verifyFailed();\n          return false;\n        }\n      }\n    }\n\n    if (this.effects && this.effects.length > 0) {\n      for (const effect of this.effects) {\n        if (!effect || !effect.verify()) {\n          verifyFailed();\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  public getMaxScaleFactor(): Point {\n    if (this.maxScale !== undefined) {\n      return this.maxScale;\n    }\n    this.maxScale = new Point(1, 1);\n    const property = this.transform!.scale;\n    if (property.animatable()) {\n      const { keyframes } = property as AnimatableProperty<Point>;\n      let scaleX = Math.abs(keyframes[0].startValue!.x);\n      let scaleY = Math.abs(keyframes[0].startValue!.y);\n      if (keyframes !== undefined && keyframes.length > 0) {\n        for (const keyframe of keyframes) {\n          const x = Math.abs(keyframe.endValue!.x);\n          const y = Math.abs(keyframe.endValue!.y);\n          if (scaleX < x) {\n            scaleX = x;\n          }\n          if (scaleY < y) {\n            scaleY = y;\n          }\n        }\n      }\n      this.maxScale.x = scaleX;\n      this.maxScale.y = scaleY;\n    } else {\n      this.maxScale.x = Math.abs(property.value.x);\n      this.maxScale.y = Math.abs(property.value.y);\n    }\n    if (this.parent !== undefined) {\n      const parentScale = this.parent.getMaxScaleFactor();\n      this.maxScale.x *= parentScale.x;\n      this.maxScale.y *= parentScale.y;\n    }\n    return this.maxScale;\n  }\n}\n","import { Color } from '../base/color';\nimport { Composition } from '../base/composition';\nimport { Ratio } from '../base/ratio';\nimport { ByteArray } from './utils/byte-array';\nimport { Point } from '../base/point';\nimport { Layer } from '../base/layer';\nimport { Mask } from '../base/mask';\n\nexport const SPATIAL_PRECISION = 0.05;\nexport const BEZIER_PRECISION = 0.005;\n\nexport const readRatio = (byteArray: ByteArray): Ratio => {\n  const numeratorValue: number = byteArray.readEncodeInt32();\n  const denominatorValue: number = byteArray.readEncodedUint32();\n  const ration: Ratio = new Ratio(numeratorValue, denominatorValue);\n  return ration;\n};\n\nexport const readColor = (byteArray: ByteArray): Color => {\n  const redNum: number = byteArray.readUint8();\n  const greenNum: number = byteArray.readUint8();\n  const blueNum: number = byteArray.readUint8();\n  const color: Color = { red: redNum, green: greenNum, blue: blueNum };\n  return color;\n};\n\nexport const readTime = (byteArray: ByteArray): number => byteArray.readEncodedUint64();\n\nexport const readFloat = (byteArray: ByteArray): number => byteArray.readFloat32();\n\nexport const readBoolean = (byteArray: ByteArray): boolean => byteArray.readBitBoolean();\n\nexport const readEnum = (byteArray: ByteArray): number => byteArray.readUint8();\n\nexport const readID = (byteArray: ByteArray): number => byteArray.readEncodedUint32();\n\nexport const readLayerID = (byteArray: ByteArray): Layer => {\n  const id = byteArray.readEncodedUint32();\n  if (id === 0) throw new Error('Layer ID is 0');\n  const layer: Layer = new Layer();\n  layer.id = id;\n  return layer;\n};\n\nexport const readMaskID = (byteArray: ByteArray): Mask => {\n  const id: number = byteArray.readEncodedUint32();\n  if (id === 0) throw new Error('Mask ID is 0');\n  const mask: Mask = new Mask();\n  mask.id = id;\n  return mask;\n};\n\nexport const readCompositionID = (byteArray: ByteArray): Composition => {\n  const id: number = byteArray.readEncodedUint32();\n  if (id === 0) throw new Error('Composition ID is 0');\n  const composition: Composition = new Composition();\n  composition.id = id;\n  return composition;\n};\n\nexport const readString = (byteArray: ByteArray): string => byteArray.readUTF8String();\n\nexport function ReadOpacity(byteArray: ByteArray): number {\n  return byteArray.readUint8();\n}\n\nexport const readPoint = (byteArray: ByteArray): Point => {\n  const x: number = byteArray.readFloat32();\n  const y: number = byteArray.readFloat32();\n  return new Point(x, y);\n};\n","import { Composition } from '../../base/composition';\nimport { readColor, readTime } from '../data-types';\nimport { ByteArray } from '../utils/byte-array';\n\nexport const readCompositionAttributes = (byteArray: ByteArray, composition: Composition) => {\n  composition.width = byteArray.readEncodeInt32();\n  composition.height = byteArray.readEncodeInt32();\n  composition.duration = readTime(byteArray);\n  composition.frameRate = byteArray.readFloat32();\n  composition.backgroundColor = readColor(byteArray);\n};\n","import { Composition } from '../base/composition';\n\nexport class Context {\n  public tagLevel = 0;\n  public compositions: Array<Composition> = [];\n\n  private errorMessages: string[] = [];\n\n  public throwException(message: string) {\n    this.errorMessages.push(message);\n  }\n\n  public releaseCompositions(): Array<Composition> {\n    const compositions = this.compositions.slice();\n    this.compositions = [];\n    return compositions;\n  }\n}\n","export const ErrorMessage = {\n  PAGDecodeError: 'PAG file decode error!',\n};\n","import { Context } from '../context';\nimport { ErrorMessage } from '../../base/utils/error-map';\n\nconst LENGTH_FOR_STORE_NUM_BITS = 5;\n\nexport class ByteArray {\n  public context: Context;\n\n  private readonly littleEndian: boolean;\n  private dataView: DataView;\n  private _position = 0;\n  private bitPosition = 0;\n\n  public constructor(buffer: ArrayBuffer, littleEndian?: boolean) {\n    this.dataView = new DataView(buffer);\n    this.littleEndian = !!littleEndian;\n    this.context = new Context();\n  }\n\n  public get length(): number {\n    return this.dataView.byteLength;\n  }\n\n  public get bytesAvailable(): number {\n    return this.dataView.byteLength - this._position;\n  }\n\n  public data(): ArrayBuffer {\n    return this.dataView.buffer;\n  }\n\n  public get position(): number {\n    return this._position;\n  }\n\n  public alignWithBytes() {\n    this.bitPosition = this._position * 8;\n  }\n\n  public readBoolean(): boolean {\n    const value = this.dataView.getInt8(this._position);\n    this._position += 1;\n    this.positonChanged();\n    return Boolean(value);\n  }\n\n  public readChar(): string {\n    if (this._position >= this.length) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getInt8(this._position);\n    this._position += 1;\n    this.positonChanged();\n    return String.fromCharCode(value);\n  }\n\n  public readUint8(): number {\n    if (this._position >= this.length) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getUint8(this._position);\n    this._position += 1;\n    this.positonChanged();\n    return value;\n  }\n\n  public readInt8(): number {\n    if (this._position >= this.length) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getInt8(this._position);\n    this._position += 1;\n    this.positonChanged();\n    return value;\n  }\n\n  public readInt16(): number {\n    if (this._position >= this.length - 1) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getInt16(this._position, this.littleEndian);\n    this._position += 2;\n    this.positonChanged();\n    return value;\n  }\n\n  public readUint16(): number {\n    if (this._position >= this.length - 1) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getUint16(this._position, this.littleEndian);\n    this._position += 2;\n    this.positonChanged();\n    return value;\n  }\n\n  public readInt24(): number {\n    if (this._position >= this.length - 2) throw new Error(ErrorMessage.PAGDecodeError);\n    const left = this.dataView.getInt16(this._position, this.littleEndian);\n    const right = this.dataView.getInt8(this._position + 2);\n    this._position += 3;\n    this.positonChanged();\n    return this.littleEndian ? left + 2 ** 16 * right : 2 ** 16 * left + right;\n  }\n\n  public readUint24(): number {\n    if (this._position >= this.length - 2) throw new Error(ErrorMessage.PAGDecodeError);\n    const left = this.dataView.getUint16(this._position, this.littleEndian);\n    const right = this.dataView.getUint8(this._position + 2);\n    this._position += 3;\n    this.positonChanged();\n    return this.littleEndian ? left + 2 ** 16 * right : 2 ** 16 * left + right;\n  }\n\n  public readInt32(): number {\n    if (this._position >= this.length - 3) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getInt32(this._position, this.littleEndian);\n    this._position += 4;\n    this.positonChanged();\n    return value;\n  }\n\n  public readUint32(): number {\n    if (this._position >= this.length - 3) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getUint32(this._position, this.littleEndian);\n    this._position += 4;\n    this.positonChanged();\n    return value;\n  }\n\n  public readInt64(): number {\n    if (this._position >= this.length - 7) throw new Error(ErrorMessage.PAGDecodeError);\n    const left = this.dataView.getInt32(this._position, this.littleEndian);\n    const right = this.dataView.getInt32(this._position + 4, this.littleEndian);\n    this._position += 8;\n    this.positonChanged();\n    return this.littleEndian ? left + 2 ** 32 * right : 2 ** 32 * left + right;\n  }\n\n  public readUint64(): number {\n    if (this._position >= this.length - 7) throw new Error(ErrorMessage.PAGDecodeError);\n    const left = this.dataView.getUint32(this._position, this.littleEndian);\n    const right = this.dataView.getUint32(this._position + 4, this.littleEndian);\n    this._position += 8;\n    this.positonChanged();\n    return this.littleEndian ? left + 2 ** 32 * right : 2 ** 32 * left + right;\n  }\n\n  public readFloat32(): number {\n    if (this._position >= this.length - 3) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getFloat32(this._position, this.littleEndian);\n    this._position += 4;\n    this.positonChanged();\n    return value;\n  }\n\n  public readDouble(): number {\n    if (this._position >= this.length - 7) throw new Error(ErrorMessage.PAGDecodeError);\n    const value = this.dataView.getFloat64(this._position, this.littleEndian);\n    this._position += 8;\n    this.positonChanged();\n    return value;\n  }\n\n  public readUTF8String(): string {\n    if (this._position >= this.length) throw new Error(ErrorMessage.PAGDecodeError);\n    let encoded = '';\n    let dataLength = 0;\n    for (let i = this._position; i < this.length; i++) {\n      if (this.dataView.getUint8(i) === 0) {\n        break;\n      }\n      encoded += `%${this.dataView.getUint8(i).toString(16)}`;\n      dataLength += 1;\n    }\n    this._position += dataLength;\n    this.positonChanged();\n    return decodeURIComponent(encoded);\n  }\n\n  public readEncodedUint32(): number {\n    const valueMask = 127;\n    const hasNext = 128;\n    let value = 0;\n    let byte = 0;\n    for (let i = 0; i < 32; i += 7) {\n      if (this._position >= this.length) {\n        throw Error('readEncodedUint32 End of file was encountered.');\n      }\n      byte = this.dataView.getUint8(this._position);\n      this._position += 1;\n      value |= (byte & valueMask) << i;\n      if ((byte & hasNext) === 0) {\n        break;\n      }\n    }\n    this.positonChanged();\n    return value;\n  }\n\n  public readEncodeInt32(): number {\n    const data = this.readEncodedUint32();\n    const value = data >> 1;\n    return (data & 1) > 0 ? -value : value;\n  }\n\n  public readEncodedUint64(): number {\n    const valueMask = 127;\n    const hasNext = 128;\n    let value = 0;\n    let byte = 0;\n    for (let i = 0; i < 64; i += 7) {\n      if (this._position >= this.length) {\n        throw Error('readEncodedUint64 End of file was encountered.');\n      }\n      byte = this.dataView.getUint8(this._position);\n      this._position += 1;\n      value |= (byte & valueMask) << i;\n      if ((byte & hasNext) === 0) {\n        break;\n      }\n    }\n    this.positonChanged();\n    return value;\n  }\n\n  public readEncodeInt64(): number {\n    const data = this.readEncodedUint64();\n    const value = data << 0;\n    return (data & 1) > 0 ? -value : value;\n  }\n\n  public readBytes(length?: number): ByteArray {\n    const len = length || this.length - this._position;\n    if (this._position > this.length - len) throw new Error(ErrorMessage.PAGDecodeError);\n    const newBuffer = this.dataView.buffer.slice(this._position, this._position + len);\n    this._position += len;\n    this.positonChanged();\n    return new ByteArray(newBuffer, this.littleEndian);\n  }\n\n  public readUBits(numBits: number): number {\n    const bitMasks: number[] = [0, 1, 3, 7, 15, 31, 63, 127, 255];\n    let value = 0;\n    if (this.bitPosition > this.length * 8 - numBits) throw new Error(ErrorMessage.PAGDecodeError);\n    let pos = 0;\n    while (pos < numBits) {\n      const bytePosition = Math.floor(this.bitPosition * 0.125);\n      const bitPosition = this.bitPosition % 8;\n      let byte = this.dataView.getUint8(bytePosition) >> bitPosition;\n      const bitLength = Math.min(8 - bitPosition, numBits - pos);\n      byte &= bitMasks[bitLength];\n      value |= byte << pos;\n      pos += bitLength;\n      this.bitPosition += bitLength;\n    }\n    this.bitPositionChanged();\n    return value;\n  }\n\n  public readBits(numBits: number): number {\n    let value = this.readUBits(numBits);\n    value <<= 32 - numBits;\n    const data = value << 0;\n    return data >> (32 - numBits);\n  }\n\n  public readNumBits(): number {\n    return this.readUBits(LENGTH_FOR_STORE_NUM_BITS) + 1;\n  }\n\n  public readInt32List(count: number): number[] {\n    const numBits = this.readNumBits();\n    const value = new Array(count);\n    for (let i = 0; i < count; i++) {\n      value[i] = this.readBits(numBits);\n    }\n    return value;\n  }\n\n  public readUint32List(count: number): number[] {\n    const numBits = this.readNumBits();\n    const value = new Array(count);\n    for (let i = 0; i < count; i++) {\n      value[i] = this.readUBits(numBits);\n    }\n    return value;\n  }\n\n  public readBitBoolean() {\n    return this.readUBits(1) !== 0;\n  }\n\n  public readFloatList(count: number, precision: number): number[] {\n    const numBits = this.readNumBits();\n    const value = new Array(count);\n    for (let i = 0; i < count; i++) {\n      value[i] = this.readBits(numBits) * precision;\n    }\n    return value;\n  }\n\n  private bitPositionChanged() {\n    this._position = Math.ceil(this.bitPosition * 0.125);\n  }\n\n  private positonChanged() {\n    this.bitPosition = this._position * 8;\n  }\n}\n","import { ByteArray } from '../codec/utils/byte-array';\n\nexport class ByteData {\n  public data: ByteArray;\n  public length = 0;\n\n  public constructor(data: ByteArray, length: number) {\n    this.data = data;\n    this.length = length;\n  }\n}\n","import { ByteArray } from '../codec/utils/byte-array';\nimport { ByteData } from './byte-data';\n\nexport class VideoFrame {\n  public isKeyframe = false;\n  public frame = 0;\n  public fileBytes: ByteData = new ByteData(new ByteArray(new ArrayBuffer(0)), 0);\n}\n","import { Composition } from './composition';\nimport { verifyAndReturn } from './utils/verify';\n\nexport class Sequence {\n  public composition: Composition | undefined = undefined;\n  public id = 0;\n  public width = 0;\n  public height = 0;\n  public frameRate = 0;\n  public frameCount = 0;\n  public isKeyFrameFlags: Array<boolean> = [];\n\n  public verify() {\n    return verifyAndReturn(this.composition !== undefined && this.width > 0 && this.height > 0 && this.frameRate > 0);\n  }\n}\n","import { ByteData } from './byte-data';\nimport { Sequence } from './sequence';\nimport { TimeRange } from './time-range';\nimport { verifyFailed } from './utils/verify';\nimport { VideoFrame } from './video-frame';\n\nexport class VideoSequence extends Sequence {\n  public alphaStartX = 0;\n  public alphaStartY = 0;\n  public frames: Array<VideoFrame> = [];\n  public headers: Array<ByteData> = [];\n  public staticTimeRanges: Array<TimeRange> = [];\n\n  public verify(): boolean {\n    if (!super.verify() || this.frames.length <= 0) {\n      verifyFailed();\n      return false;\n    }\n    for (const frame of this.frames) {\n      if (!frame || !frame.fileBytes) {\n        verifyFailed();\n        return false;\n      }\n    }\n    for (const header of this.headers) {\n      if (!header) {\n        verifyFailed();\n        return false;\n      }\n    }\n    return true;\n  }\n  // The exact total width and height of the picture were not recorded when the video sequence frame\n  // was exported，You need to do the calculation yourself with width and alphaStartX，\n  // If an odd size is encountered, the exporter plugin automatically increments by one，\n  // This matches the rules for exporter plugin。\n  public getVideoWidth() {\n    let videoWidth = this.alphaStartX + this.width;\n    if (videoWidth % 2 === 1) {\n      videoWidth += 1;\n    }\n    return videoWidth;\n  }\n\n  public getVideoHeight() {\n    let videoHeight = this.alphaStartY + this.height;\n    if (videoHeight % 2 === 1) {\n      videoHeight += 1;\n    }\n    return videoHeight;\n  }\n}\n","export const memcpy = (dst: ArrayBuffer, dstOffset: number, src: ArrayBuffer, srcOffset: number, num: number) => {\n  if (\n    dstOffset >= dst.byteLength ||\n    srcOffset >= src.byteLength ||\n    src.byteLength - srcOffset > dst.byteLength - dstOffset ||\n    num > src.byteLength\n  )\n    return;\n  const dstUint8Array = new Uint8Array(dst);\n  const srcUint8Array = new Uint8Array(src, srcOffset, num);\n  dstUint8Array.set(srcUint8Array, dstOffset);\n};\n\nexport const concatUint8Arrays = (arrays: Array<Uint8Array>) => {\n  let totalLength = 0;\n  for (const arr of arrays) {\n    totalLength += arr.byteLength;\n  }\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.byteLength;\n  }\n  return result;\n};\n","import { ByteData } from '../base/byte-data';\nimport { ByteArray } from './utils/byte-array';\nimport { memcpy } from './utils/byte-utils';\n\nexport const readByteDataWithStartCode = (byteArray: ByteArray) => {\n  const length = byteArray.readEncodedUint32();\n  const bytes = byteArray.readBytes(length);\n  if (length === 0) throw new Error('Read start code with length 0!');\n  const data = new ArrayBuffer(length + 4);\n  const dataView = new DataView(data);\n  dataView.setUint32(0, length);\n  memcpy(data, 4, bytes.data(), 0, length);\n  return new ByteData(new ByteArray(data), length + 4);\n};\n","import { TimeRange } from '../../base/time-range';\nimport { VideoFrame } from '../../base/video-frame';\nimport { VideoSequence } from '../../base/video-sequence';\nimport { readTime } from '../data-types';\nimport { readByteDataWithStartCode } from '../nalu-start-code';\nimport { ByteArray } from '../utils/byte-array';\n\nexport const readVideoSequence = (byteArray: ByteArray, hasAlpha: boolean): VideoSequence => {\n  const videoSequence = new VideoSequence();\n  videoSequence.width = byteArray.readEncodeInt32();\n  videoSequence.height = byteArray.readEncodeInt32();\n  videoSequence.frameRate = byteArray.readFloat32();\n  if (hasAlpha) {\n    videoSequence.alphaStartX = byteArray.readEncodeInt32();\n    videoSequence.alphaStartY = byteArray.readEncodeInt32();\n  }\n\n  const sps = readByteDataWithStartCode(byteArray);\n  const pps = readByteDataWithStartCode(byteArray);\n  videoSequence.headers.push(sps, pps);\n\n  videoSequence.frameCount = byteArray.readEncodedUint32();\n  for (let i = 0; i < videoSequence.frameCount; i++) {\n    const videoFrame = new VideoFrame();\n    videoFrame.isKeyframe = byteArray.readBitBoolean();\n    videoSequence.frames.push(videoFrame);\n  }\n  for (let i = 0; i < videoSequence.frameCount; i++) {\n    const videoFrame = videoSequence.frames[i];\n    videoFrame.frame = readTime(byteArray);\n    videoFrame.fileBytes = readByteDataWithStartCode(byteArray);\n  }\n\n  if (byteArray.bytesAvailable > 0) {\n    const count = byteArray.readEncodedUint32();\n    for (let i = 0; i < count; i++) {\n      const staticTimeRange: TimeRange = { start: 0, end: 0 };\n      staticTimeRange.start = readTime(byteArray);\n      staticTimeRange.end = readTime(byteArray);\n      videoSequence.staticTimeRanges.push(staticTimeRange);\n    }\n  }\n\n  return videoSequence;\n};\n","import { VideoComposition } from '../../base/video-composition';\nimport { TagCode } from '../types';\nimport { ByteArray } from '../utils/byte-array';\nimport { readCompositionAttributes } from './composition-attributes';\nimport { readTags } from './tag-header';\nimport { readVideoSequence } from './video-sequence-tag';\n\nexport const readVideoComposition = (byteArray: ByteArray): VideoComposition => {\n  const composition = new VideoComposition();\n  composition.id = byteArray.readEncodedUint32();\n  composition.hasAlpha = byteArray.readBoolean();\n  const parameter = { composition, hasAlpha: composition.hasAlpha };\n  readTags(byteArray, parameter, ReadTagsOfVideoComposition);\n  return composition;\n};\n\nexport const ReadTagsOfVideoComposition = (\n  byteArray: ByteArray,\n  code: TagCode,\n  parameter: { composition: VideoComposition; hasAlpha: boolean },\n) => {\n  const { composition } = parameter;\n  switch (code) {\n    case TagCode.CompositionAttributes:\n      readCompositionAttributes(byteArray, composition);\n      break;\n    case TagCode.VideoSequence: {\n      const sequence = readVideoSequence(byteArray, parameter.hasAlpha);\n      sequence.composition = composition;\n      composition.sequences.push(sequence);\n      break;\n    }\n    default:\n      break;\n  }\n};\n","import { Mask } from '../mask';\nimport { Property } from '../property';\nimport { TimeRange } from '../time-range';\n\nexport const enum EffectType {\n  Unknown,\n  Tint,\n  Fill,\n  Stroke,\n  Tritone,\n  DropShadow,\n  RadialWipe,\n  DisplacementMap,\n}\n\nexport class Effect {\n  public effectOpacity: Property<number> | undefined;\n  public maskReferences: Array<Mask> | undefined; // mask reference\n\n  public type(): EffectType {\n    return EffectType.Unknown;\n  }\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_time: number): void {}\n\n  public verify(): boolean {\n    return false;\n  }\n}\n","export interface TimeRange {\n  start: number;\n  end: number;\n}\n\nexport function subtractFromTimeRanges(timeRanges: Array<TimeRange>, startTime: number, endTime: number) {\n  if (endTime < startTime) {\n    return;\n  }\n  const size = timeRanges.length;\n  for (let i = size - 1; i >= 0; i--) {\n    const timeRange = timeRanges[i];\n    if (timeRange.end < startTime || timeRange.start > endTime) {\n      continue;\n    }\n    if (timeRange.start < startTime && timeRange.end > endTime) {\n      const range = { start: endTime + 1, end: timeRange.end };\n      timeRange.end = startTime - 1;\n      if (range.end > range.start) {\n        timeRanges.splice(i + 1, 0, range);\n      }\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n      break;\n    }\n    if (timeRange.start >= startTime && timeRange.end <= endTime) {\n      timeRanges.splice(i, 1);\n    } else if (timeRange.start < startTime) {\n      timeRange.end = startTime - 1;\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n    } else {\n      timeRange.start = endTime + 1;\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n    }\n  }\n}\n\nexport function splitTimeRangesAt(timeRanges: Array<TimeRange>, startTime: number) {\n  const size = timeRanges.length;\n  for (let i = size - 1; i >= 0; i--) {\n    const timeRange = timeRanges[i];\n    if (timeRange.start === startTime || timeRange.end <= startTime) {\n      break;\n    }\n    if (timeRange.start < startTime && timeRange.end > startTime) {\n      const range = { start: startTime, end: timeRange.end };\n      timeRange.end = startTime - 1;\n      if (range.end > range.start) {\n        timeRanges.splice(i + 1, 0, range);\n      }\n      if (timeRange.end <= timeRange.start) {\n        timeRanges.splice(i, 1);\n      }\n      break;\n    }\n  }\n}\n\nfunction findTimeRangeAt(timeRanges: Array<TimeRange>, position: number, start: number, end: number): number {\n  if (start > end) {\n    return -1;\n  }\n  const index = Math.ceil((start + end) * 0.5);\n  const timeRange = timeRanges[index];\n  if (timeRange.start > position) {\n    return findTimeRangeAt(timeRanges, position, start, index - 1);\n  }\n  if (timeRange.end < position) {\n    return findTimeRangeAt(timeRanges, position, index + 1, end);\n  }\n  return index;\n}\n\nexport function convertFrameByStaticTimeRanges(timeRanges: Array<TimeRange>, frame: number): number {\n  const index = findTimeRangeAt(timeRanges, frame, 0, timeRanges.length - 1);\n  return index !== -1 ? timeRanges[index].start : frame;\n}\n","import { CompositionType } from '../codec/types';\nimport { Composition } from './composition';\nimport { Layer } from './layer';\nimport { splitTimeRangesAt, TimeRange } from './time-range';\nimport { verifyFailed } from './utils/verify';\n\nexport class VectorComposition extends Composition {\n  public layers: Array<Layer> = [];\n\n  private staticTimeRanges: Array<TimeRange> = [];\n  private staticTimeRangeUpdated = false;\n\n  public type(): CompositionType {\n    return CompositionType.Vector;\n  }\n\n  /**\n   * Returns the static time ranges of this composition.\n   */\n  public getStaticTimeRanges(): Array<TimeRange> {\n    if (!this.staticTimeRangeUpdated) {\n      this.staticTimeRangeUpdated = true;\n      this.updateStaticTimeRanges();\n    }\n    return this.staticTimeRanges;\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      verifyFailed();\n      return false;\n    }\n    for (const layer of this.layers) {\n      if (!layer || !layer.verify()) {\n        verifyFailed();\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateStaticTimeRanges() {\n    if (this.duration > 1) {\n      const range = { start: 0, end: this.duration - 1 };\n      this.staticTimeRanges = [range];\n      for (const layer of this.layers) {\n        if (this.staticTimeRanges.length <= 0) {\n          break;\n        }\n        layer.excludeVaryingRanges(this.staticTimeRanges);\n        splitTimeRangesAt(this.staticTimeRanges, layer.startTime);\n        splitTimeRangesAt(this.staticTimeRanges, layer.startTime + layer.duration);\n      }\n    }\n  }\n}\n","import { TimeRange } from './time-range';\n\nexport class Property<T> {\n  public value: T;\n\n  public constructor(value: T) {\n    this.value = value;\n  }\n\n  public animatable(): boolean {\n    return false;\n  }\n\n  public excludeVaryingRanges(_timeRanges: Array<TimeRange>): void {}\n\n  public gotoFrame(_time: number): void {}\n}\n","import { OPAQUE } from '../constant';\nimport { Point, ZERO_POINT } from './point';\nimport { Property } from './property';\n\nimport type { TimeRange } from './time-range';\n\nexport class Transform2D {\n  public static createDefaultTransform2D() {\n    const transform = new Transform2D();\n\n    return transform;\n  }\n\n  public anchorPoint: Property<Point>; // spatial\n  public position: Property<Point>; // spatial\n  public xPosition: Property<number>;\n  public yPosition: Property<number>;\n  public scale: Property<Point>; // multidimensional\n  public rotation: Property<number>;\n  public opacity: Property<number>;\n\n  public constructor() {\n    this.anchorPoint = new Property<Point>(ZERO_POINT);\n    this.position = new Property<Point>(ZERO_POINT);\n    this.xPosition = new Property<number>(0);\n    this.yPosition = new Property<number>(0);\n    this.scale = new Property<Point>(new Point(1, 1));\n    this.rotation = new Property<number>(0);\n    this.opacity = new Property<number>(OPAQUE);\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    this.anchorPoint.excludeVaryingRanges(timeRanges);\n    if (this.position !== undefined) {\n      this.position.excludeVaryingRanges(timeRanges);\n    } else {\n      this.xPosition.excludeVaryingRanges(timeRanges);\n      this.yPosition.excludeVaryingRanges(timeRanges);\n    }\n    this.scale.excludeVaryingRanges(timeRanges);\n    this.rotation.excludeVaryingRanges(timeRanges);\n    this.opacity.excludeVaryingRanges(timeRanges);\n  }\n\n  public gotoFrame(frame: number): void {\n    this.anchorPoint.gotoFrame(frame);\n    if (this.position !== undefined) {\n      this.position.gotoFrame(frame);\n    } else {\n      this.xPosition.gotoFrame(frame);\n      this.yPosition.gotoFrame(frame);\n    }\n    this.scale.gotoFrame(frame);\n    this.rotation.gotoFrame(frame);\n    this.opacity.gotoFrame(frame);\n  }\n\n  public verify(): boolean {\n    return (\n      this.anchorPoint !== undefined &&\n      (this.position !== undefined || (this.xPosition !== undefined && this.yPosition !== undefined)) &&\n      this.scale !== undefined &&\n      this.rotation !== undefined &&\n      this.opacity !== undefined\n    );\n  }\n}\n","import { ZERO_TIME } from '../constant';\nimport { Composition } from './composition';\nimport { Layer, LayerType } from './layer';\nimport { TimeRange } from './time-range';\nimport { Transform2D } from './transform-2d';\n\nexport class PreComposeLayer extends Layer {\n  public static wrap(composition: Composition) {\n    const layer = new PreComposeLayer();\n    layer.duration = composition.duration;\n    const transform = new Transform2D();\n    layer.transform = transform;\n    layer.composition = composition;\n    return layer;\n  }\n\n  /**\n   * composition reference\n   */\n  public composition: Composition | undefined = undefined;\n\n  /**\n   * Indicates when the first frame of the composition shows in the layer's timeline. It could be a negative value.\n   */\n  public compositionStartTime: number = ZERO_TIME;\n\n  private staticTimeRanges: Array<TimeRange> | undefined = undefined;\n  private staticTimeRangeUpdated = false;\n\n  public type(): LayerType {\n    return LayerType.PreCompose;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    super.excludeVaryingRanges(timeRanges);\n    if (!timeRanges || timeRanges.length === 0) {\n      return;\n    }\n    this.updateStaticTimeRanges();\n  }\n\n  public gotoFrame(frame: number): void {\n    super.gotoFrame(frame);\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      return false;\n    }\n    if (this.composition) {\n      return true;\n    }\n    return false;\n  }\n\n  private updateStaticTimeRanges(): void {\n    if (this.staticTimeRangeUpdated) {\n      return;\n    }\n    this.staticTimeRangeUpdated = true;\n    const ranges = this.composition?.getStaticTimeRanges();\n    if (!ranges) return;\n    for (let i = ranges.length - 1; i >= 0; i--) {\n      const range: TimeRange = ranges[i];\n      range.start += this.compositionStartTime;\n      range.end += this.compositionStartTime;\n      if (range.end <= this.startTime) {\n        ranges.pop();\n      } else if (range.start < this.startTime) {\n        range.start = 0;\n      } else if (range.start >= this.startTime + this.duration - 1) {\n        ranges.pop();\n      } else if (range.end > this.startTime + this.duration - 1) {\n        range.end = this.startTime + this.duration - 1;\n      }\n    }\n    this.staticTimeRanges = ranges;\n  }\n}\n","import { Layer, LayerType } from './layer';\nimport { ShapeElement } from './shape-element';\nimport { TimeRange } from './time-range';\n\nexport class ShapeLayer extends Layer {\n  private contents: Array<ShapeElement> = [];\n\n  public type(): LayerType {\n    return LayerType.Shape;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>) {\n    super.excludeVaryingRanges(timeRanges);\n    for (const element of this.contents) {\n      element.excludeVaryingRanges(timeRanges);\n    }\n  }\n\n  public gotoFrame(frame: number) {\n    super.gotoFrame(frame);\n    for (const element of this.contents) {\n      element.gotoFrame(frame);\n    }\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      return false;\n    }\n\n    for (const element of this.contents) {\n      if (element === undefined || !element.verify()) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Black, Color } from './color';\nimport { Layer, LayerType } from './layer';\nimport { TimeRange } from './time-range';\nimport { verifyAndReturn, verifyFailed } from './utils/verify';\n\nexport class SolidLayer extends Layer {\n  public solidColor: Color = Black;\n  public width = 0;\n  public height = 0;\n\n  public type(): LayerType {\n    return LayerType.Solid;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>) {\n    super.excludeVaryingRanges(timeRanges);\n  }\n\n  public gotoFrame(frame: number) {\n    super.gotoFrame(frame);\n  }\n\n  public verify(): boolean {\n    if (!super.verify()) {\n      verifyFailed();\n      return false;\n    }\n    return verifyAndReturn(this.width > 0 && this.height > 0);\n  }\n}\n","import { Layer, LayerType } from './layer';\n\nexport class UnDefinedLayer extends Layer {\n  public type(): LayerType {\n    return LayerType.undefined;\n  }\n}\n","import { KeyframeInterpolationType } from '../constant';\nimport { Point, ZERO_POINT } from './point';\n\nexport class Keyframe<T> {\n  public startValue: T | undefined;\n  public endValue: T | undefined;\n  public startTime = 0;\n  public endTime = 0;\n  public interpolationType: KeyframeInterpolationType = KeyframeInterpolationType.Hold; // 插补类型\n  public bezierOut: Array<Point> = [];\n  public bezierIn: Array<Point> = [];\n  public spatialOut: Point = ZERO_POINT;\n  public spatialIn: Point = ZERO_POINT;\n\n  public initialize(): void {}\n\n  public getValue(_time: number): any {\n    return this.startValue;\n  }\n\n  public containsTime(time: number): boolean {\n    return time >= this.startTime && time < this.endTime;\n  }\n}\n","import { KeyframeInterpolationType } from '../constant';\nimport { Keyframe } from './keyframe';\nimport { Property } from './property';\nimport { splitTimeRangesAt, subtractFromTimeRanges, TimeRange } from './time-range';\n\nexport class AnimatableProperty<T> extends Property<T> {\n  private lastKeyframeIndex = 0;\n\n  public constructor(public keyframes: Array<Keyframe<T>>) {\n    if (!keyframes || keyframes.length === 0) throw new Error('keyframes is required');\n    if (keyframes[0].startValue === undefined) throw new Error('startValue is required');\n    super(keyframes[0].startValue);\n    for (const keyframe of keyframes) {\n      keyframe.initialize();\n    }\n  }\n\n  public animatable(): boolean {\n    return true;\n  }\n\n  public excludeVaryingRanges(timeRanges: Array<TimeRange>): void {\n    for (const keyframe of this.keyframes) {\n      switch (keyframe.interpolationType) {\n        case KeyframeInterpolationType.Bezier:\n        case KeyframeInterpolationType.Linear:\n          subtractFromTimeRanges(timeRanges, keyframe.startTime, keyframe.endTime - 1);\n          break;\n        default:\n          splitTimeRangesAt(timeRanges, keyframe.startTime);\n          splitTimeRangesAt(timeRanges, keyframe.endTime);\n          break;\n      }\n    }\n  }\n\n  public gotoFrame(frame: number): void {\n    let lastKeyframe = this.keyframes[this.lastKeyframeIndex];\n    if (lastKeyframe.containsTime(frame)) {\n      this.value = lastKeyframe.getValue(frame);\n      return;\n    }\n    if (frame < lastKeyframe.startTime) {\n      while (this.lastKeyframeIndex > 0) {\n        this.lastKeyframeIndex -= 1;\n        if (this.keyframes[this.lastKeyframeIndex].containsTime(frame)) {\n          break;\n        }\n      }\n    } else {\n      while (this.lastKeyframeIndex < this.keyframes.length - 1) {\n        this.lastKeyframeIndex += 1;\n        if (this.keyframes[this.lastKeyframeIndex].containsTime(frame)) {\n          break;\n        }\n      }\n    }\n    lastKeyframe = this.keyframes[this.lastKeyframeIndex];\n    if (lastKeyframe.startValue !== undefined && frame <= lastKeyframe.startTime) {\n      this.value = lastKeyframe.startValue;\n    } else if (lastKeyframe.endValue !== undefined && frame >= lastKeyframe.endTime) {\n      this.value = lastKeyframe.endValue;\n    } else {\n      this.value = lastKeyframe.getValue(frame);\n    }\n  }\n}\n","import { TagCode } from './types';\nimport { ByteArray } from './utils/byte-array';\nimport { Keyframe } from '../base/keyframe';\nimport { Property } from '../base/property';\nimport { BEZIER_PRECISION, readTime } from './data-types';\nimport { KeyframeInterpolationType } from '../constant';\nimport { AnimatableProperty } from '../base/animatable-property';\n\nexport const enum AttributeType {\n  Value,\n  FixedValue, // always exists, no need to store a flag.\n  SimpleProperty,\n  DiscreteProperty,\n  MultiDimensionProperty,\n  SpatialProperty,\n  BitFlag, // save bool value as a flag\n  Custom, // save a flag to indicate whether it should trigger a custom reading / writing action.\n}\n\nexport interface AttributeFlag {\n  /**\n   * Indicates whether or not this value is exist.\n   */\n  exist: boolean;\n  /**\n   * Indicates whether or not the size of this property's keyframes is greater than zero.\n   */\n  animatable: boolean;\n  /**\n   * Indicates whether or not this property has spatial values.\n   */\n  hasSpatial: boolean;\n}\n\nexport const readTagBlock = <T>(byteArray: ByteArray, parameter: T, blockConfig: BlockConfig) => {\n  const tagConfig: BlockConfig = blockConfig;\n  const flags: Array<AttributeFlag> = [];\n  if (!tagConfig.configs || tagConfig.configs.length === 0) {\n    return parameter;\n  }\n  for (const config of tagConfig.configs) {\n    const flag = readAttributeFlag(byteArray, config);\n    flags.push(flag);\n  }\n  byteArray.alignWithBytes();\n  let index = 0;\n  for (const config of tagConfig.configs) {\n    const flag = flags[index];\n    const target = config.key;\n    config.readAttribute(byteArray, flag, parameter as any as Object, target);\n    index += 1;\n  }\n  return parameter;\n};\n\nexport class BlockConfig {\n  public tagCode: TagCode = TagCode.End;\n  public configs: Array<BaseAttribute> = [];\n\n  public constructor(tagCode: TagCode) {\n    this.tagCode = tagCode;\n  }\n}\n\nexport class BaseAttribute {\n  public attributeType: AttributeType;\n  public defaultValue: any;\n  public key: string;\n\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    this.attributeType = attributeType;\n    this.defaultValue = defaultValue;\n    this.key = key;\n  }\n\n  public readAttribute(_byteArray: ByteArray, _flag: AttributeFlag, _targetClass: object, _target: string) {}\n\n  public readValue(_byteArray: ByteArray): any {\n    return undefined;\n  }\n\n  public readValueList(_byteArray: ByteArray, _list: Array<any>, _count: number) {}\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<any> {\n    return new Keyframe<any>();\n  }\n}\n\nexport const readAttribute = (\n  byteArray: ByteArray,\n  flag: AttributeFlag,\n  targetClass: { [key: string]: any },\n  target: string,\n  config: BaseAttribute,\n) => {\n  if (config.attributeType === AttributeType.BitFlag) {\n    targetClass[target] = flag.exist;\n  } else if (config.attributeType === AttributeType.FixedValue) {\n    targetClass[target] = config.readValue(byteArray);\n  } else if (config.attributeType === AttributeType.Value) {\n    targetClass[target] = readValue(byteArray, config, flag);\n  } else {\n    targetClass[target] = readProperty(byteArray, config, flag);\n  }\n};\n\nexport const readProperty = <T>(byteArray: ByteArray, config: BaseAttribute, flag: AttributeFlag): any => {\n  let property: Property<T>;\n  if (flag.exist) {\n    if (flag.animatable) {\n      const keyframes: Array<Keyframe<T>> = readKeyframes(byteArray, config, flag);\n      if (!keyframes || keyframes.length === 0) {\n        throw new Error('Wrong number of keyframes!');\n      }\n      readTimeAndValue(byteArray, keyframes, config);\n      readTimeEase(byteArray, keyframes, config);\n      if (flag.hasSpatial) {\n        readSpatialEase(byteArray, keyframes);\n      }\n      property = new AnimatableProperty<T>(keyframes);\n    } else {\n      property = new Property<T>(readValue(byteArray, config, flag));\n    }\n  } else {\n    property = new Property<T>(config.defaultValue);\n  }\n  return property;\n};\n\nexport const readValue = (byteArray: ByteArray, config: BaseAttribute, flag: AttributeFlag): any => {\n  if (flag.exist) {\n    return config.readValue(byteArray);\n  }\n  return config.defaultValue;\n};\n\nexport const readAttributeFlag = (byteArray: ByteArray, config: BaseAttribute): AttributeFlag => {\n  const flag: AttributeFlag = { exist: false, animatable: false, hasSpatial: false };\n  const { attributeType } = config;\n  if (attributeType === AttributeType.FixedValue) {\n    flag.exist = true;\n    return flag;\n  }\n  flag.exist = byteArray.readBitBoolean();\n  if (\n    !flag.exist ||\n    attributeType === AttributeType.Value ||\n    attributeType === AttributeType.BitFlag ||\n    attributeType === AttributeType.Custom\n  ) {\n    return flag;\n  }\n  flag.animatable = byteArray.readBitBoolean();\n  if (!flag.animatable || attributeType !== AttributeType.SpatialProperty) {\n    return flag;\n  }\n  flag.hasSpatial = byteArray.readBitBoolean();\n  return flag;\n};\n\nexport const readKeyframes = <T>(\n  byteArray: ByteArray,\n  config: BaseAttribute,\n  flag: AttributeFlag,\n): Array<Keyframe<T>> => {\n  const keyframes: Array<any> = [];\n  const numFrames: number = byteArray.readEncodedUint32();\n  for (let i = 0; i < numFrames; i++) {\n    let keyframe: Keyframe<T>;\n    if (config.attributeType === AttributeType.DiscreteProperty) {\n      keyframe = new Keyframe<T>();\n    } else {\n      const interpolationType = byteArray.readUBits(2) as KeyframeInterpolationType;\n      if (interpolationType === KeyframeInterpolationType.Hold) {\n        keyframe = new Keyframe<T>();\n      } else {\n        keyframe = config.newKeyframe(flag);\n        keyframe.interpolationType = interpolationType;\n      }\n    }\n    keyframes.push(keyframe);\n  }\n\n  return keyframes;\n};\n\nconst readTimeAndValue = <T>(byteArray: ByteArray, keyframes: Array<Keyframe<T>>, config: BaseAttribute) => {\n  const numFrames: number = keyframes.length;\n  keyframes[0].startTime = readTime(byteArray);\n  for (let i = 0; i < numFrames; i++) {\n    const time: number = readTime(byteArray);\n    keyframes[i].endTime = time;\n    if (i < numFrames - 1) {\n      keyframes[i + 1].startTime = time;\n    }\n  }\n  const list: Array<T> = [];\n  config.readValueList(byteArray, list, numFrames + 1);\n  let index = 0;\n  keyframes[0].startValue = list[index];\n  index += 1;\n  for (let i = 0; i < numFrames; i++) {\n    const value = list[index];\n    index += 1;\n    keyframes[i].endValue = value;\n    if (i < numFrames - 1) {\n      keyframes[i + 1].startValue = value;\n    }\n  }\n};\n\nconst readTimeEase = <T>(byteArray: ByteArray, keyframes: Array<Keyframe<T>>, config: BaseAttribute) => {\n  const dimensionality: number =\n    config.attributeType === AttributeType.MultiDimensionProperty ? config.dimensionality() : 1;\n  const numBits: number = byteArray.readNumBits();\n  for (const keyframe of keyframes) {\n    if (keyframe.interpolationType !== KeyframeInterpolationType.Bezier) {\n      continue;\n    }\n    let x: number;\n    let y: number;\n    for (let i = 0; i < dimensionality; i++) {\n      x = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      y = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      keyframe.bezierOut.push({ x, y });\n      x = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      y = byteArray.readBits(numBits) * BEZIER_PRECISION;\n      keyframe.bezierIn.push({ x, y });\n    }\n  }\n};\n\nconst readSpatialEase = <T>(_byteArray: ByteArray, _keyframes: Array<Keyframe<T>>) => {};\n","import { SolidLayer } from '../../base/solid-layer';\nimport { readColor } from '../data-types';\nimport { ByteArray } from '../utils/byte-array';\n\nexport function readSolidColor(byteArray: ByteArray, layer: SolidLayer) {\n  layer.solidColor = readColor(byteArray);\n  layer.width = byteArray.readEncodeInt32();\n  layer.height = byteArray.readEncodeInt32();\n}\n","export function interpolateFloat(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n","export class Interpolator {\n  public getInterpolation(input: number): number {\n    return input;\n  }\n}\n","import { KeyframeInterpolationType } from '../../constant';\nimport { Keyframe } from '../keyframe';\nimport { Point } from '../point';\nimport { interpolateFloat } from '../utils/interpolate';\nimport { Interpolator } from '../utils/interpolator';\n\nexport class MultiDimensionPointKeyframe extends Keyframe<Point> {\n  private xInterpolator: Interpolator | undefined;\n  private yInterpolator: Interpolator | undefined;\n\n  public initialize(): void {\n    super.initialize();\n    if (this.interpolationType === KeyframeInterpolationType.Bezier) {\n      // todo sun bezier\n    } else {\n      this.xInterpolator = new Interpolator();\n      this.yInterpolator = new Interpolator();\n    }\n  }\n\n  public getValue(time: number): Point {\n    const progress = (time - this.startTime) / (this.endTime - this.startTime);\n    const xProgress = this.xInterpolator?.getInterpolation(progress) ?? progress;\n    const yProgress = this.yInterpolator?.getInterpolation(progress) ?? progress;\n    const x = interpolateFloat(this.startValue!.x, this.endValue!.x, xProgress);\n    const y = interpolateFloat(this.startValue!.y, this.endValue!.y, yProgress);\n    return { x, y };\n  }\n}\n","import { KeyframeInterpolationType } from '../../constant';\nimport { Keyframe } from '../keyframe';\nimport { interpolateFloat } from '../utils/interpolate';\nimport { Interpolator } from '../utils/interpolator';\n\nexport class SingleEaseKeyframe<T> extends Keyframe<T> {\n  private interpolator: Interpolator | undefined;\n\n  public initialize() {\n    if (this.interpolationType === KeyframeInterpolationType.Bezier) {\n      // Bazier相关\n    } else {\n      this.interpolator = new Interpolator();\n    }\n  }\n\n  public getProgress(time: number): number {\n    const progress = (time - this.startTime) / (this.endTime - this.startTime);\n    return this.interpolator?.getInterpolation(progress) ?? progress;\n  }\n\n  public getValue(time: number): number {\n    const progress = this.getProgress(time);\n    return interpolateFloat(this.startValue as any as number, this.endValue as any as number, progress);\n  }\n}\n","import { Color } from '../base/color';\nimport { Composition } from '../base/composition';\nimport { Keyframe } from '../base/keyframe';\nimport { MultiDimensionPointKeyframe } from '../base/keyframes/multi-dimension-point-keyframe';\nimport { SingleEaseKeyframe } from '../base/keyframes/single-ease-keyframe';\nimport { Layer } from '../base/layer';\nimport { Point } from '../base/point';\nimport { Ratio } from '../base/ratio';\nimport { AttributeFlag, AttributeType, BaseAttribute, readAttribute } from './attribute-helper';\nimport {\n  readColor,\n  readCompositionID,\n  readLayerID,\n  readPoint,\n  readRatio,\n  readTime,\n  SPATIAL_PRECISION,\n} from './data-types';\nimport { ByteArray } from './utils/byte-array';\n\nexport interface BaseAttributeConfig<T> {\n  newKeyframe: (flag: AttributeFlag) => Keyframe<T>;\n}\n\nexport class FloatAttributeConfig extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return byteArray.readFloat32();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list.push(this.readValue(byteArray));\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class BOOLAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Boolean> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): boolean {\n    return byteArray.readBoolean();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<boolean>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list.push(byteArray.readBitBoolean());\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<boolean> {\n    return new Keyframe<boolean>();\n  }\n}\n\nexport class Uint8AttributeConfig extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: number) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return byteArray.readUint8();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    const valueList = byteArray.readUint32List(count);\n    for (let i = 0; i < count; i++) {\n      list.push(valueList[i]);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class AttributeConfigUint32 extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return byteArray.readEncodedUint32();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    // eslint-disable-next-line no-param-reassign\n    list = byteArray.readUint32List(count);\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class TimeAttributeConfig extends BaseAttribute implements BaseAttributeConfig<number> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): number {\n    return readTime(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<number>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<number> {\n    return new SingleEaseKeyframe<number>();\n  }\n}\n\nexport class PointAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Point> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Point {\n    return readPoint(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Point>, count: number) {\n    if (this.attributeType === AttributeType.SpatialProperty) {\n      const values: number[] = byteArray.readFloatList(count * 2, SPATIAL_PRECISION);\n      for (let i = 0; i < count; i++) {\n        list[i] || (list[i] = new Point(0, 0));\n        list[i].x = values[i];\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        list[i] = readPoint(byteArray);\n      }\n    }\n  }\n\n  public dimensionality(): number {\n    return 2;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Point> {\n    switch (this.attributeType) {\n      case AttributeType.MultiDimensionProperty:\n        return new MultiDimensionPointKeyframe();\n      default:\n        return new SingleEaseKeyframe<Point>();\n    }\n  }\n}\n\nexport class ColorAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Color> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Color {\n    return readColor(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Color>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 3;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Color> {\n    return new SingleEaseKeyframe<Color>();\n  }\n}\n\nexport class RatioAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Ratio> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Ratio {\n    return readRatio(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Ratio>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Ratio> {\n    return new SingleEaseKeyframe<Ratio>();\n  }\n}\n\nexport class StringAttributeConfig extends BaseAttribute implements BaseAttributeConfig<string> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): string {\n    return byteArray.readUTF8String();\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<string>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<string> {\n    return new SingleEaseKeyframe<string>();\n  }\n}\n\nexport class LayerAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Layer> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Layer {\n    return readLayerID(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Layer>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Layer> {\n    return new SingleEaseKeyframe<Layer>();\n  }\n}\n\nexport class CompositionAttributeConfig extends BaseAttribute implements BaseAttributeConfig<Composition> {\n  public constructor(key: string, attributeType: AttributeType, defaultValue: any) {\n    super(key, attributeType, defaultValue);\n  }\n\n  public readAttribute(byteArray: ByteArray, flag: AttributeFlag, targetClass: object, target: string) {\n    readAttribute(byteArray, flag, targetClass, target, this);\n  }\n\n  public readValue(byteArray: ByteArray): Composition {\n    return readCompositionID(byteArray);\n  }\n\n  public readValueList(byteArray: ByteArray, list: Array<Composition>, count: number) {\n    for (let i = 0; i < count; i++) {\n      list[i] = this.readValue(byteArray);\n    }\n  }\n\n  public dimensionality(): number {\n    return 1;\n  }\n\n  public newKeyframe(_flag: AttributeFlag): Keyframe<Composition> {\n    return new SingleEaseKeyframe<Composition>();\n  }\n}\n","import { TrackMatteType } from '../../base/layer';\nimport { Point, ZERO_POINT } from '../../base/point';\nimport { DefaultRatio } from '../../base/ratio';\nimport { BlendMode, OPAQUE, ZERO_TIME } from '../../constant';\nimport { TagCode } from '../types';\nimport { AttributeType, BlockConfig } from '../attribute-helper';\nimport {\n  BOOLAttributeConfig,\n  FloatAttributeConfig,\n  LayerAttributeConfig,\n  PointAttributeConfig,\n  RatioAttributeConfig,\n  StringAttributeConfig,\n  TimeAttributeConfig,\n  Uint8AttributeConfig,\n} from '../attributes';\n\nexport const readBlockConfigOfLayerAttributes: BlockConfig = {\n  tagCode: TagCode.LayerAttributes,\n  configs: [\n    new BOOLAttributeConfig('isActive', AttributeType.BitFlag, true),\n    new BOOLAttributeConfig('autoOrientation', AttributeType.BitFlag, false),\n    new LayerAttributeConfig('parent', AttributeType.Value, undefined),\n    new RatioAttributeConfig('stretch', AttributeType.Value, DefaultRatio),\n    new TimeAttributeConfig('startTime', AttributeType.Value, ZERO_TIME),\n    new Uint8AttributeConfig('blendMode', AttributeType.Value, BlendMode.Normal),\n    new Uint8AttributeConfig('trackMatteType', AttributeType.Value, TrackMatteType.None),\n    new FloatAttributeConfig('timeRemap', AttributeType.SimpleProperty, 0),\n    new TimeAttributeConfig('duration', AttributeType.FixedValue, ZERO_TIME),\n  ],\n};\n\nexport const readBlockConfigOfLayerAttributesV2: BlockConfig = {\n  tagCode: TagCode.LayerAttributesV2,\n  configs: [\n    new BOOLAttributeConfig('isActive', AttributeType.BitFlag, true),\n    new BOOLAttributeConfig('autoOrientation', AttributeType.BitFlag, false),\n    new LayerAttributeConfig('parent', AttributeType.Value, undefined),\n    new RatioAttributeConfig('stretch', AttributeType.Value, DefaultRatio),\n    new TimeAttributeConfig('startTime', AttributeType.Value, ZERO_TIME),\n    new Uint8AttributeConfig('blendMode', AttributeType.Value, BlendMode.Normal),\n    new Uint8AttributeConfig('trackMatteType', AttributeType.Value, TrackMatteType.None),\n    new FloatAttributeConfig('timeRemap', AttributeType.SimpleProperty, 0),\n    new TimeAttributeConfig('duration', AttributeType.FixedValue, ZERO_TIME),\n    new StringAttributeConfig('name', AttributeType.Value, ''),\n  ],\n};\n\nexport const readBlockConfigOfTransform2D: BlockConfig = {\n  tagCode: TagCode.Transform2D,\n  configs: [\n    new PointAttributeConfig('anchorPoint', AttributeType.SpatialProperty, ZERO_POINT),\n    new PointAttributeConfig('position', AttributeType.SpatialProperty, ZERO_POINT),\n    new FloatAttributeConfig('xPosition', AttributeType.SimpleProperty, 0),\n    new FloatAttributeConfig('yPosition', AttributeType.SimpleProperty, 0),\n    new PointAttributeConfig('scale', AttributeType.MultiDimensionProperty, new Point(1, 1)),\n    new FloatAttributeConfig('rotation', AttributeType.SimpleProperty, 0),\n    new Uint8AttributeConfig('opacity', AttributeType.SimpleProperty, OPAQUE),\n  ],\n};\n\nexport const readBlockConfigOfMask: BlockConfig = {\n  tagCode: TagCode.MaskBlock,\n  configs: [],\n};\n","import { ByteArray } from '../utils/byte-array';\nimport { PreComposeLayer } from '../../base/pre-compose-layer';\nimport { Composition } from '../../base/composition';\nimport { readTime } from '../data-types';\n\nexport function readCompositionReference(byteArray: ByteArray, layer: PreComposeLayer) {\n  const id = byteArray.readEncodedUint32();\n  if (id > 0) {\n    layer.composition = new Composition();\n    layer.composition.id = id;\n  }\n  layer.compositionStartTime = readTime(byteArray);\n}\n","import { Layer, LayerType } from '../../base/layer';\nimport { ZERO_POINT } from '../../base/point';\nimport { PreComposeLayer } from '../../base/pre-compose-layer';\nimport { ShapeLayer } from '../../base/shape-layer';\nimport { SolidLayer } from '../../base/solid-layer';\nimport { Transform2D } from '../../base/transform-2d';\nimport { UnDefinedLayer } from '../../base/un-defined-layer';\nimport { TagCode } from '../types';\nimport { readTagBlock } from '../attribute-helper';\nimport { ByteArray } from '../utils/byte-array';\nimport { readSolidColor } from './solid-layer';\nimport {\n  readBlockConfigOfLayerAttributes,\n  readBlockConfigOfLayerAttributesV2,\n  readBlockConfigOfTransform2D,\n} from './tag-attributes';\nimport { readTags } from './tag-header';\nimport { readCompositionReference } from './read-composition-reference';\nimport { Property } from '../../base/property';\n\nexport const readLayer = (byteArray: ByteArray): Layer => {\n  const layerType: LayerType = byteArray.readUint8();\n  let layer: Layer;\n  switch (layerType) {\n    case LayerType.undefined:\n      layer = new UnDefinedLayer();\n      break;\n    case LayerType.Solid:\n      layer = new SolidLayer();\n      break;\n    case LayerType.Shape:\n      layer = new ShapeLayer();\n      break;\n    case LayerType.PreCompose:\n      layer = new PreComposeLayer();\n      break;\n    default:\n      layer = new Layer();\n      break;\n  }\n  layer.id = byteArray.readEncodedUint32();\n  readTags(byteArray, layer, readTagsOfLayer);\n  return layer;\n};\n\nexport const readTagsOfLayer = (byteArray: ByteArray, code: TagCode, layer: Layer) => {\n  switch (code) {\n    case TagCode.LayerAttributes:\n      readTagBlock(byteArray, layer, readBlockConfigOfLayerAttributes);\n      if (layer.duration <= 0) layer.duration = 1;\n      break;\n    case TagCode.LayerAttributesV2:\n      readTagBlock(byteArray, layer, readBlockConfigOfLayerAttributesV2);\n      if (layer.duration <= 0) layer.duration = 1;\n      break;\n    case TagCode.Transform2D:\n      layer.transform = new Transform2D();\n      readTagBlock(byteArray, layer.transform, readBlockConfigOfTransform2D);\n      // hasPosition || (!hasXPosition && !hasXPosition)\n      if (\n        layer.transform.position.animatable() ||\n        layer.transform.position.value !== ZERO_POINT ||\n        (!(layer.transform.xPosition.animatable() || layer.transform.xPosition.value !== 0) &&\n          !(layer.transform.yPosition.animatable() || layer.transform.yPosition.value !== 0))\n      ) {\n        layer.transform.xPosition = new Property(0);\n        layer.transform.yPosition = new Property(0);\n      } else {\n        layer.transform.position = new Property(ZERO_POINT);\n      }\n      break;\n    case TagCode.SolidColor:\n      if (layer.type() === LayerType.Solid) {\n        readSolidColor(byteArray, layer as SolidLayer);\n      }\n      break;\n    case TagCode.CompositionReference:\n      if (layer.type() === LayerType.PreCompose) {\n        readCompositionReference(byteArray, layer as PreComposeLayer);\n      }\n      break;\n    default:\n      break;\n  }\n};\n","import { EffectType } from '../../base/effects/effect';\nimport { FillEffect } from '../../base/effects/fill-effect';\nimport { StrokeEffect } from '../../base/effects/stroke-effect';\nimport { Layer, LayerType, TrackMatteType } from '../../base/layer';\nimport { Mask } from '../../base/mask';\nimport { TextLayer } from '../../base/text-layer';\nimport { VectorComposition } from '../../base/vector-composition';\nimport { TagCode } from '../types';\nimport { ByteArray } from '../utils/byte-array';\nimport { readCompositionAttributes } from './composition-attributes';\nimport { readLayer } from './layer-tag';\nimport { readTags } from './tag-header';\n\nexport const readVectorComposition = (byteArray: ByteArray): VectorComposition => {\n  const composition = new VectorComposition();\n  composition.id = byteArray.readEncodedUint32();\n  readTags(byteArray, composition, readTagsOfVectorComposition);\n  installArrayLayerReference(composition.layers);\n  return composition;\n};\n\nexport const readTagsOfVectorComposition = (byteArray: ByteArray, code: TagCode, composition: VectorComposition) => {\n  switch (code) {\n    case TagCode.CompositionAttributes:\n      readCompositionAttributes(byteArray, composition);\n      break;\n    case TagCode.LayerBlock:\n      composition.layers.push(readLayer(byteArray));\n      break;\n    default:\n      break;\n  }\n};\n\nexport const installArrayLayerReference = (layers: Array<Layer>) => {\n  if (layers && layers.length === 0) {\n    return;\n  }\n  const layerMap = new Map();\n  for (const layer of layers) {\n    if (!layer) {\n      continue;\n    }\n    installLayerReference(layer);\n    layerMap.set(layer.id, layer);\n  }\n\n  let index = 0;\n  for (const layer of layers) {\n    if (!layer) {\n      continue;\n    }\n    if (layer.parent !== undefined) {\n      const ID = layer.parent.id;\n      const result = layerMap.get(ID);\n      if (result !== undefined) {\n        layer.parent = result;\n      }\n    }\n    if (index > 0 && hasTrackMatte(layer.trackMatteType)) {\n      layer.trackMatteLayer = layers[index - 1];\n    }\n    if (layer.effects !== undefined && layer.effects.length > 0) {\n      for (const effect of layer.effects) {\n        if (!effect) {\n          continue;\n        }\n        if (effect.type() === EffectType.DisplacementMap) {\n          // let displacementMapEffect = <DisplacementMapEffect> effect;\n          // if (displacementMapEffect.displacementMapLayer != undefined) {\n          //     let ID = displacementMapEffect.displacementMapLayer.id;\n          //     let result = layerMap.get(ID);\n          //     if (result != undefined) {\n          //         displacementMapEffect.displacementMapLayer = result;\n          //     }\n          // }\n        }\n      }\n    }\n    index += 1;\n  }\n};\n\n/**\n * 将Layer里面的MaskID标识换成真正的Mask\n * @param layer\n */\nconst installLayerReference = (layer: Layer) => {\n  if (!layer || !layer.masks || layer.masks.length === 0) return;\n  const maskMap = new Map();\n  for (const mask of layer.masks) {\n    if (!mask) {\n      continue;\n    }\n    maskMap.set(mask.id, mask);\n  }\n\n  layer.effects?.forEach((effect) => {\n    if (!effect) return;\n    if (effect.maskReferences !== undefined && effect.maskReferences.length > 0) {\n      const maskReferences = new Array<Mask>();\n      effect.maskReferences.forEach((mask) => {\n        const ID = mask.id;\n        const result = maskMap.get(ID);\n        if (result !== undefined) {\n          maskReferences.push(result);\n        }\n      });\n      effect.maskReferences = maskReferences;\n    }\n    switch (effect.type()) {\n      case EffectType.Fill:\n        if ((effect as FillEffect).fillMask !== undefined) {\n          const ID = (effect as FillEffect).fillMask!.id;\n          const result = maskMap.get(ID);\n          if (result !== undefined) {\n            (effect as FillEffect).fillMask = result;\n          }\n        }\n        break;\n      case EffectType.Stroke: {\n        const strokeEffect = effect as StrokeEffect;\n        if (strokeEffect.path !== undefined) {\n          const ID = strokeEffect.path.id;\n          const result = maskMap.get(ID);\n          if (result !== undefined) {\n            strokeEffect.path = result;\n          }\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  });\n\n  if (layer.type() === LayerType.Text) {\n    const { pathOption } = layer as TextLayer;\n    if (pathOption?.path) {\n      const ID = pathOption.path.id;\n      const result = maskMap.get(ID);\n      if (result !== undefined) {\n        pathOption.path = result;\n      }\n    }\n  }\n};\n\nexport const hasTrackMatte = (type: TrackMatteType): boolean => {\n  switch (type) {\n    case TrackMatteType.Alpha:\n    case TrackMatteType.AlphaInverted:\n      return true;\n    default:\n      return false;\n  }\n};\n","import { readVideoComposition } from './video-composition-tag';\nimport { readVectorComposition } from './vector-composition-tag';\nimport { TagCode } from '../types';\n\nimport type { Context } from '../context';\nimport type { ByteArray } from '../utils/byte-array';\n\nexport function readTagsOfFile(byteArray: ByteArray, code: TagCode, context: Context): void {\n  switch (code) {\n    case TagCode.VectorCompositionBlock:\n      context.compositions.push(readVectorComposition(byteArray));\n      break;\n    case TagCode.VideoCompositionBlock:\n      context.compositions.push(readVideoComposition(byteArray));\n      break;\n    default:\n      break;\n  }\n}\n","import { ByteArray } from './codec/utils/byte-array';\nimport { readTags } from './codec/tags/tag-header';\nimport { readTagsOfFile } from './codec/tags/file-tags';\nimport { Composition } from './base/composition';\nimport { CompositionType, TagCode } from './codec/types';\nimport { VectorComposition } from './base/vector-composition';\nimport { LayerType } from './base/layer';\nimport { PreComposeLayer } from './base/pre-compose-layer';\n\nexport const verifyAndMake = (compositions: Array<Composition>) => {\n  let success: boolean = compositions.length > 0;\n  for (const composition of compositions) {\n    if (!composition || !composition.verify()) {\n      success = false;\n      break;\n    }\n  }\n  if (!success) {\n    throw new Error('Verify composition failed!');\n  }\n};\n\n/**\n * 将Layer里面的compositionID标识换成真正的Composition\n */\nexport function installReference(compositions: Array<Composition>) {\n  if (!compositions || compositions.length === 0) return;\n  const compositionMap = new Map();\n  compositions.forEach((composition) => {\n    if (composition) {\n      compositionMap.set(composition.id, composition);\n    }\n  });\n  compositions.forEach((composition) => {\n    if (composition && composition.type() === CompositionType.Vector) {\n      const vectorComposition = composition as VectorComposition;\n      if (vectorComposition.layers && vectorComposition.layers.length > 0) {\n        vectorComposition.layers.forEach((layer) => {\n          layer.containingComposition = vectorComposition;\n          const preComposeLayer = layer as PreComposeLayer;\n          if (preComposeLayer.type() === LayerType.PreCompose && preComposeLayer.composition) {\n            const res = compositionMap.get(preComposeLayer.composition.id);\n            if (res) {\n              preComposeLayer.composition = res;\n            }\n          }\n        });\n      }\n    }\n  });\n}\n\nexport class PAGCodec {\n  public static maxSupportedTagLevel(): number {\n    return TagCode.Count - 1;\n  }\n}\n\n/**\n * Decode PAG File from bytes\n */\nexport const decode = (byteArray: ByteArray) => {\n  const bodyByteArray: ByteArray = readBodyBytes(byteArray);\n  const { context } = bodyByteArray;\n  readTags(bodyByteArray, context, readTagsOfFile);\n  installReference(context.compositions);\n  const compositions = context.releaseCompositions();\n  verifyAndMake(compositions);\n  return { compositions, tagLevel: context.tagLevel };\n};\n\nexport const readBodyBytes = (byteArray: ByteArray): ByteArray => {\n  if (byteArray.length < 11) throw new Error('PAG file is invalid!');\n  const P: number = byteArray.readInt8();\n  const A: number = byteArray.readInt8();\n  const G: number = byteArray.readInt8();\n  if (P !== 80 || A !== 65 || G !== 71) throw new Error('invalid PAG header!');\n  byteArray.readInt8(); // version\n  byteArray.readUint32(); // bodyLength\n  byteArray.readInt8(); // compression\n  return byteArray.readBytes();\n};\n","import { decode } from './pag-codec';\nimport { Composition } from './base/composition';\nimport { LayerType } from './base/layer';\nimport { VectorComposition } from './base/vector-composition';\nimport { ByteArray } from './codec/utils/byte-array';\nimport { CompositionType } from './codec/types';\nimport { TimeRange } from './base/time-range';\nimport { PreComposeLayer } from './base/pre-compose-layer';\nimport { VideoComposition } from './base/video-composition';\n\nexport class PAGFile {\n  public static fromArrayBuffer(arrayBuffer: ArrayBuffer): PAGFile {\n    if (!arrayBuffer || arrayBuffer.byteLength === 0) throw new Error(\"Can't read empty array buffer!\");\n    const byteArray = new ByteArray(arrayBuffer, true);\n    const { compositions, tagLevel } = decode(byteArray);\n    return new PAGFile(compositions, tagLevel);\n  }\n\n  public tagLevel = 1;\n  public mainComposition: Composition;\n  public compositions: Array<Composition> = [];\n  public numLayers = 0;\n  public duration: number;\n  public implDuration: number;\n  public scaledTimeRange: TimeRange = { start: 0, end: 0 };\n\n  public constructor(compositions: Array<Composition>, tagLevel: number) {\n    this.mainComposition = compositions[compositions.length - 1];\n    this.scaledTimeRange.start = 0;\n    this.scaledTimeRange.end = this.mainComposition.duration;\n    this.compositions = compositions;\n    this.duration = this.mainComposition.duration;\n    this.implDuration = (this.mainComposition.duration * 1000) / this.mainComposition.frameRate;\n    for (const composition of compositions) {\n      if (composition.type() !== CompositionType.Vector) {\n        this.numLayers += 1;\n        continue;\n      }\n      for (const layer of (composition as VectorComposition).layers) {\n        if (layer.type() === LayerType.PreCompose) {\n          continue;\n        }\n        this.numLayers += 1;\n      }\n    }\n    this.tagLevel = tagLevel;\n  }\n\n  public getVideoSequence() {\n    const compositionType = this.mainComposition.type();\n    if (compositionType === CompositionType.Video) {\n      return getVideoSequenceFromVideoComposition(this.mainComposition as VideoComposition);\n    } else if (compositionType === CompositionType.Vector) {\n      return getVideoSequenceFromVectorComposition(this.mainComposition as VectorComposition);\n    }\n  }\n}\n\nconst getVideoSequenceFromVideoComposition = (videoComposition: VideoComposition) => {\n  if (!videoComposition.sequences || videoComposition.sequences.length === 0) {\n    throw new Error('PAGFile has no BMP video sequence!');\n  }\n  return videoComposition.sequences[videoComposition.sequences.length - 1];\n};\n\nconst getVideoSequenceFromVectorComposition = (vectorComposition: VectorComposition) => {\n  const videoCompositions = getVideoComposition(vectorComposition);\n  if (videoCompositions.length > 1) throw new Error('PAGFile has more than one BMP video sequence!');\n  if (videoCompositions.length < 1) throw new Error('PAGFile has no BMP video sequence!');\n  const videoComposition = videoCompositions[0];\n  return getVideoSequenceFromVideoComposition(videoComposition);\n};\n\nconst getVideoComposition = (vectorComposition: VectorComposition) => {\n  const videoCompositions: VideoComposition[] = [];\n  vectorComposition.layers.forEach((layer) => {\n    if (layer.type() !== LayerType.PreCompose) return;\n    const { composition } = layer as PreComposeLayer;\n    if (composition?.type() === CompositionType.Video) {\n      videoCompositions.push(composition as VideoComposition);\n      return;\n    }\n    if (composition?.type() === CompositionType.Vector) {\n      videoCompositions.push(...getVideoComposition(composition as VectorComposition));\n    }\n  });\n  return videoCompositions;\n};\n","export interface VideoParam {\n  width: number; // VideoComposition width\n  height: number; // VideoComposition height\n  MP4Width: number; // MP4 width (with alpha)\n  MP4Height: number; // MP4 height (with alpha)\n  sequenceWidth: number; // VideoSequence width (without alpha)\n  sequenceHeight: number; // VideoSequence width (without alpha)\n  hasAlpha: boolean; // Whether the video has alpha\n  alphaStartX: number; // Alpha start x\n  alphaStartY: number; // Alpha start y\n}\n\nexport enum RenderingMode {\n  Canvas2D = '2d',\n  WebGL = 'WebGL',\n}\n\nexport enum EventName {\n  /**\n   * Notifies the start of the animation.\n   */\n  onAnimationStart = 'onAnimationStart',\n  /**\n   * Notifies the end of the animation.\n   */\n  onAnimationEnd = 'onAnimationEnd',\n  /**\n   * Notifies the cancellation of the animation.\n   */\n  onAnimationCancel = 'onAnimationCancel',\n  /**\n   * Notifies the repetition of the animation.\n   */\n  onAnimationRepeat = 'onAnimationRepeat',\n  /**\n   * Notifies the update of the animation.\n   */\n  onAnimationUpdate = 'onAnimationUpdate',\n  /**\n   * Notifies the play of the animation.\n   */\n  onAnimationPlay = 'onAnimationPlay',\n  /**\n   * Notifies the pause of the animation.\n   */\n  onAnimationPause = 'onAnimationPause',\n}\n\nexport enum ScaleMode {\n  None = 'None',\n  /**\n   * 拉伸内容到适应画布\n   */\n  Stretch = 'Stretch',\n  /**\n   * 根据原始比例缩放内容\n   */\n  LetterBox = 'LetterBox',\n  /**\n   * 根据原始比例被缩放适应，一个轴会被裁剪\n   */\n  Zoom = 'Zoom',\n}\n\nexport interface DebugData {\n  FPS?: number;\n  decodePAGFile?: number;\n  createDir?: number;\n  coverMP4?: number;\n  writeFile?: number;\n  createDecoder?: number;\n  getFrame?: number;\n  draw?:number;\n}\n","export function destroyVerify(constructor: any) {\n  let functions = Object.getOwnPropertyNames(constructor.prototype).filter(\n    (name) => name !== 'constructor' && typeof constructor.prototype[name] === 'function',\n  );\n\n  const proxyFn = (target: { [prop: string]: any }, methodName: string) => {\n    const fn = target[methodName];\n    target[methodName] = function (...args: any[]) {\n      if (this['destroyed']) {\n        console.error(`Don't call ${methodName} of the PAGView that is destroyed.`);\n        return;\n      }\n      return fn.call(this, ...args);\n    };\n  };\n  functions.forEach((name) => proxyFn(constructor.prototype, name));\n}\n","import type { PAGFile } from '../pag-file';\nimport type { VideoParam } from '../types';\nimport type { VideoSequence } from '../base/video-sequence';\n\nexport const detectWebGLContext = () => {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  const gl: RenderingContext | null = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n  return !!gl;\n};\n\nexport const createProgram = (gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) => {\n  const program = gl.createProgram();\n  if (!program) throw new Error('Failed to create program.');\n  const vShader = createShader(gl, vertexShaderSource, gl.VERTEX_SHADER);\n  if (!vShader) throw new Error('Failed to create vertex shader.');\n  gl.attachShader(program, vShader);\n  const fShader = createShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);\n  if (!fShader) throw new Error('Failed to create fragment shader.');\n  gl.attachShader(program, fShader);\n  gl.linkProgram(program);\n\n  const programMessage = gl.getProgramInfoLog(program);\n  if (programMessage) console.log(programMessage);\n  const vShaderMessage = gl.getShaderInfoLog(vShader);\n  if (vShaderMessage) console.log(vShaderMessage);\n  const fShaderMessage = gl.getShaderInfoLog(fShader);\n  if (fShaderMessage) console.log(fShaderMessage);\n\n  return program;\n};\n\nconst createShader = (gl: WebGLRenderingContext, source: string, type: GLenum) => {\n  const shader = gl.createShader(type);\n  if (!shader) throw new Error('Failed to create shader.');\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  return shader;\n};\n\nexport const getShaderSourceFromString = (str: string) => str.replace(/^\\s+|\\s+$/g, '');\n\nexport const getVideoParam = (pagFile: PAGFile, videoSequence: VideoSequence) => {\n  const attribute: VideoParam = {\n    width: pagFile.mainComposition.width,\n    height: pagFile.mainComposition.height,\n    hasAlpha: videoSequence.alphaStartX > 0 || videoSequence.alphaStartY > 0,\n    alphaStartX: videoSequence.alphaStartX,\n    alphaStartY: videoSequence.alphaStartY,\n    sequenceWidth: videoSequence.width,\n    sequenceHeight: videoSequence.height,\n    MP4Width:\n      (videoSequence.width + videoSequence.alphaStartX) % 2 === 0\n        ? videoSequence.width + videoSequence.alphaStartX\n        : videoSequence.width + videoSequence.alphaStartX + 1, // Must be even number\n    MP4Height:\n      (videoSequence.height + videoSequence.alphaStartY) % 2 === 0\n        ? videoSequence.height + videoSequence.alphaStartY\n        : videoSequence.height + videoSequence.alphaStartY + 1, // Must be even number\n  };\n  return attribute;\n};\n\nexport const createAndSetupTexture = (gl: WebGLRenderingContext) => {\n  const texture = gl.createTexture();\n  if (!texture) throw new Error('Failed to create texture.');\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  // Set up texture so we can render any size image and so we are\n  // working with pixels.\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  return texture;\n};\n\n// Get video initiated token on Wechat browser.\nexport const getWechatNetwork = () => {\n  return new Promise<void>((resolve) => {\n    window.WeixinJSBridge.invoke(\n      'getNetworkType',\n      {},\n      () => {\n        resolve();\n      },\n      () => {\n        resolve();\n      },\n    );\n  });\n};\n","export type Listener = (...payload: any) => void;\n\ninterface ListenersMap {\n  [propName: string]: Listener[];\n}\n\nexport class EventManager {\n  private listenersMap: ListenersMap;\n\n  public constructor() {\n    this.listenersMap = {};\n  }\n\n  public on(eventName: string, listener: Listener) {\n    if (this.listenersMap[eventName] === undefined) {\n      this.listenersMap[eventName] = [];\n    }\n    this.listenersMap[eventName].push(listener);\n    return;\n  }\n\n  public off(eventName: string, listener?: Listener) {\n    const listenerList: Listener[] = this.listenersMap[eventName];\n    if (listenerList === undefined) return;\n    if (listener === undefined) {\n      delete this.listenersMap[eventName];\n      return;\n    }\n    const index = listenerList.findIndex((fn: Listener) => fn === listener);\n    listenerList.splice(index, 1);\n    return;\n  }\n\n  public emit(eventName: string, ...payload: any): boolean {\n    const listenerList: Listener[] = this.listenersMap[eventName];\n    if (listenerList === undefined || listenerList.length < 1) return false;\n    for (const listener of listenerList) {\n      listener(...payload);\n    }\n    return true;\n  }\n}\n","import { getVideoParam } from './utils';\nimport { RenderingMode, EventName, ScaleMode } from '../types';\nimport { EventManager, Listener } from '../base/utils/event-manager';\nimport { destroyVerify } from '../decorators';\n\nimport type { PAGFile } from '../pag-file';\nimport type { VideoParam, DebugData } from '../types';\nimport type { VideoSequence } from '../base/video-sequence';\n\nexport interface RenderOptions {\n  renderingMode?: RenderingMode;\n  useScale?: boolean;\n}\n\n@destroyVerify\nexport class Context {\n  protected canvas: HTMLCanvasElement | null;\n  protected canvasSize = { width: 0, height: 0 };\n  protected eventManager: EventManager;\n  protected playing = false;\n  protected videoParam: VideoParam;\n  protected viewportSize = { x: 0, y: 0, width: 0, height: 0, scaleX: 1, scaleY: 1 }; // viewport尺寸 WebGL坐标轴轴心在左下角|Canvas2D坐标轴轴心在左上角\n  protected destroyed = false;\n  protected videoSequence: VideoSequence;\n  protected renderTimer: number | null = null;\n  protected repeatCount = 0; // 设置动画重复的次数。默认值为 0，只播放一次。如为 -1 动画则无限播放。\n\n  private renderingMode: RenderingMode;\n  private viewScaleMode = ScaleMode.LetterBox;\n  private debugData: DebugData = {\n    FPS: 0,\n    decodePAGFile: 0,\n    createDir: 0,\n    coverMP4: 0,\n    writeFile: 0,\n    createDecoder: 0,\n    getFrame: 0,\n    draw: 0,\n  };\n\n  public constructor(pagFile: PAGFile, canvas: HTMLCanvasElement, options: RenderOptions) {\n    const videoSequence = pagFile.getVideoSequence();\n    if (!videoSequence) throw new Error('PAGFile has no BMP video sequence!');\n    delete videoSequence.composition;\n    this.videoSequence = videoSequence;\n    this.canvas = canvas;\n    this.videoParam = getVideoParam(pagFile, videoSequence);\n    this.eventManager = new EventManager();\n    this.renderingMode = options.renderingMode || RenderingMode.WebGL;\n    this.updateSize(options.useScale);\n    this.setScaleMode();\n  }\n  /**\n   * 是否播放中\n   */\n  public isPlaying() {\n    return this.playing;\n  }\n  /**\n   * 是否已经销毁\n   */\n  public isDestroyed() {\n    return this.destroyed;\n  }\n  /**\n   * 动画持续时间\n   */\n  public duration() {\n    return this.videoSequence.frameCount / this.videoSequence.frameRate;\n  }\n  /**\n   * 动画持续时间\n   */\n  public frameRate() {\n    return this.videoSequence.frameRate;\n  }\n  /**\n   * 设置动画重复的次数。默认值为 1，只播放一次。如为 0 动画则无限播放。\n   */\n  public setRepeatCount(repeatCount = 1) {\n    this.repeatCount = repeatCount < 0 ? -1 : repeatCount - 1;\n  }\n\n  /**\n   * 增加事件监听\n   */\n  public addListener(eventName: EventName, listener: Listener) {\n    return this.eventManager.on(eventName, listener);\n  }\n  /**\n   * 移除事件监听\n   */\n  public removeListener(eventName: EventName, listener?: Listener) {\n    return this.eventManager.off(eventName, listener);\n  }\n  /**\n   * 返回当前缩放模式\n   */\n  public scaleMode() {\n    return this.viewScaleMode;\n  }\n  /**\n   * 指定缩放内容的模式\n   */\n  public setScaleMode(scaleMode: ScaleMode = ScaleMode.LetterBox) {\n    this.viewScaleMode = scaleMode;\n    switch (scaleMode) {\n      case ScaleMode.None:\n        this.viewportSize = {\n          x: 0,\n          y: this.renderingMode === RenderingMode.WebGL ? this.canvas!.height - this.videoParam.height : 0,\n          width: this.videoParam.width,\n          height: this.videoParam.height,\n          scaleX: 1,\n          scaleY: 1,\n        };\n        break;\n      case ScaleMode.Stretch:\n        this.viewportSize = {\n          x: 0,\n          y: 0,\n          width: this.canvas!.width,\n          height: this.canvas!.height,\n          scaleX: this.canvas!.width / this.videoParam.sequenceWidth,\n          scaleY: this.canvas!.height / this.videoParam.sequenceHeight,\n        };\n        break;\n      case ScaleMode.LetterBox:\n        {\n          const scaleX = this.canvas!.width / this.videoParam.sequenceWidth;\n          const scaleY = this.canvas!.height / this.videoParam.sequenceHeight;\n          const scale = Math.min(scaleX, scaleY);\n          this.viewportSize = {\n            x: (this.canvas!.width - this.videoParam.sequenceWidth * scale) / 2,\n            y: (this.canvas!.height - this.videoParam.sequenceHeight * scale) / 2,\n            width: this.videoParam.sequenceWidth * scale,\n            height: this.videoParam.sequenceHeight * scale,\n            scaleX: scale,\n            scaleY: scale,\n          };\n        }\n        break;\n      case ScaleMode.Zoom:\n        {\n          const scaleX = this.canvas!.width / this.videoParam.sequenceWidth;\n          const scaleY = this.canvas!.height / this.videoParam.sequenceHeight;\n          const scale = Math.max(scaleX, scaleY);\n          this.viewportSize = {\n            x: (this.canvas!.width - this.videoParam.sequenceWidth * scale) / 2,\n            y: (this.canvas!.height - this.videoParam.sequenceHeight * scale) / 2,\n            width: this.videoParam.sequenceWidth * scale,\n            height: this.videoParam.sequenceHeight * scale,\n            scaleX: scale,\n            scaleY: scale,\n          };\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  public updateSize(useScale = true) {\n    if (!this.canvas) {\n      throw new Error('Canvas element is not found!');\n    }\n    let displaySize: { width: number; height: number };\n    const styleDeclaration = getComputedStyle(this.canvas as HTMLCanvasElement);\n    const computedSize = {\n      width: Number(styleDeclaration.width.replace('px', '')),\n      height: Number(styleDeclaration.height.replace('px', '')),\n    };\n    if (computedSize.width > 0 && computedSize.height > 0) {\n      displaySize = computedSize;\n    } else {\n      const styleSize = {\n        width: Number(this.canvas.style.width.replace('px', '')),\n        height: Number(this.canvas.style.height.replace('px', '')),\n      };\n      if (styleSize.width > 0 && styleSize.height > 0) {\n        displaySize = styleSize;\n      } else {\n        displaySize = {\n          width: this.canvas.width,\n          height: this.canvas.height,\n        };\n      }\n    }\n\n    if (!useScale) {\n      this.canvas!.width = this.canvas!.width || displaySize.width;\n      this.canvas!.height = this.canvas!.height || displaySize.height;\n      console.log('aaa useScale:false this.canvas.width: ' + JSON.stringify(this.canvas.width));\n      console.log('aaa useScale:false this.canvas.height: ' + JSON.stringify(this.canvas.height));\n      return;\n    }\n    this.canvas.style.width = `${displaySize.width}px`;\n    this.canvas.style.height = `${displaySize.height}px`;\n    console.log('aaa displaySize.width: ' + JSON.stringify(displaySize.width));\n    console.log('aaa displaySize.height: ' + JSON.stringify(displaySize.height));\n    console.log('aaa window.devicePixelRatio: ' + JSON.stringify(window.devicePixelRatio));\n    this.canvas.width = displaySize.width * window.devicePixelRatio;\n    this.canvas.height = displaySize.height * window.devicePixelRatio;\n    console.log('aaa this.canvas.width: ' + JSON.stringify(this.canvas.width));\n    console.log('aaa this.canvas.height: ' + JSON.stringify(this.canvas.height));\n  }\n\n  public getDebugData() {\n    return this.debugData;\n  }\n\n  public setDebugData(data: DebugData) {\n    this.debugData = { ...this.debugData, ...data };\n  }\n\n  protected loadContext() {}\n\n  protected clearRender() {}\n}\n","import type { ByteData } from '../base/byte-data';\nimport type { VideoSequence } from '../base/video-sequence';\n\nconst CORRECTION_UTC = 2082873600; // 1904-01-01 与 1970-1-1 相差的秒数\nconst DEFAULT_VOLUME = 1;\n\nexport interface MP4Flags {\n  isLeading: number;\n  isDependedOn: number;\n  hasRedundancy: number;\n  degradPrio: number;\n  isNonSync: number;\n  dependsOn: number;\n  isKeyFrame: boolean;\n}\n\nexport interface MP4Sample {\n  index: number;\n  size: number;\n  duration: number;\n  cts: number;\n  flags: MP4Flags;\n}\n\nexport interface MP4Track {\n  id: number;\n  type: string;\n  len: number;\n  sps: ByteData[];\n  pps: ByteData[];\n  width: number;\n  height: number;\n  timescale: number;\n  duration: number;\n  samples: MP4Sample[];\n  pts: number[];\n  implicitOffset: number;\n}\n\nexport interface BoxParam {\n  offset: number;\n  timescale: number;\n  duration: number;\n  sequenceNumber: number;\n  nalusBytesLen: number;\n  baseMediaDecodeTime: number;\n  track: MP4Track;\n  videoSequence: VideoSequence;\n  tracks: MP4Track[];\n}\n\nconst getCharCode = (name: string) => {\n  const res = [];\n  for (let index = 0; index < name.length; index++) {\n    res.push(name.charCodeAt(index));\n  }\n  return res;\n};\n\nconst toHexadecimal = (num: number) => [num >> 24, (num >> 16) & 0xff, (num >> 8) & 0xff, num & 0xff];\n\nconst makeBox = (type: number[], ...payload: Uint8Array[]): Uint8Array => {\n  let size = 8;\n  let i = payload.length;\n  const len = i;\n  while (i) {\n    i -= 1;\n    size += payload[i].byteLength;\n  }\n  const result = new Uint8Array(size);\n  result[0] = (size >> 24) & 0xff;\n  result[1] = (size >> 16) & 0xff;\n  result[2] = (size >> 8) & 0xff;\n  result[3] = size & 0xff;\n  result.set(type, 4);\n  // copy the payload into the result\n  for (i = 0, size = 8; i < len; ++i) {\n    // copy payload[i] array @ offset size\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n};\n\nexport class MP4Generator {\n  private param: BoxParam;\n\n  public constructor(boxParam: BoxParam) {\n    this.param = boxParam;\n  }\n\n  public ftyp() {\n    return makeBox(\n      getCharCode('ftyp'),\n      new Uint8Array(getCharCode('isom')), // major_brand\n      new Uint8Array([0, 0, 0, 1]), // minor_version\n      new Uint8Array(getCharCode('isom')), // compatible_brands\n      new Uint8Array(getCharCode('iso2')),\n      new Uint8Array(getCharCode('avc1')),\n      new Uint8Array(getCharCode('mp41')),\n    );\n  }\n\n  public moov() {\n    const traks = this.param.tracks.map((track) => this.trak(track)).reverse();\n    return makeBox(getCharCode('moov'), this.mvhd(), ...traks, this.mvex());\n  }\n\n  public moof() {\n    return makeBox(getCharCode('moof'), this.mfhd(), this.traf());\n  }\n\n  public mdat() {\n    const buffer = new Uint8Array(this.param.track.len);\n    let offset = 0;\n    this.param.videoSequence.headers.forEach((header) => {\n      buffer.set(new Uint8Array(header.data.data()), offset);\n      offset += header.length;\n    });\n\n    this.param.videoSequence.frames.forEach((frame, index) => {\n      buffer.set(new Uint8Array(frame.fileBytes.data.data()), offset);\n      offset += frame.fileBytes.length;\n    });\n    return makeBox(getCharCode('mdat'), buffer);\n  }\n\n  private mvhd() {\n    return makeBox(\n      getCharCode('mvhd'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        ...toHexadecimal(CORRECTION_UTC), // creation_time\n        ...toHexadecimal(CORRECTION_UTC), // modification_time\n        ...toHexadecimal(this.param.timescale), // timescale\n        ...toHexadecimal(this.param.duration), // duration\n        0x00,\n        0x01,\n        0x00,\n        0x00, // 1.0 rate\n        0x01,\n        0x00, // 1.0 volume\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x40,\n        0x00,\n        0x00,\n        0x00, // transformation: unity matrix\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00,\n        0x00,\n        0x02, // next_track_ID\n      ]),\n    );\n  }\n\n  private trak(track: MP4Track) {\n    return makeBox(getCharCode('trak'), this.tkhd(track), this.edts(track), this.mdia(track));\n  }\n\n  private tkhd(track: MP4Track) {\n    return makeBox(\n      getCharCode('tkhd'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x01, // flags\n        ...toHexadecimal(CORRECTION_UTC), // creation_time\n        ...toHexadecimal(CORRECTION_UTC), // modification_time\n        ...toHexadecimal(track.id), // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        ...toHexadecimal(track.duration), // duration\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00, // layer\n        0x00,\n        0x00, // alternate_group\n        (DEFAULT_VOLUME >> 0) & 0xff,\n        (((DEFAULT_VOLUME % 1) * 10) >> 0) & 0xff, // track volume // FIXME\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x40,\n        0x00,\n        0x00,\n        0x00, // transformation: unity matrix\n        (track.width >> 8) & 0xff,\n        track.width & 0xff,\n        0x00,\n        0x00, // width\n        (track.height >> 8) & 0xff,\n        track.height & 0xff,\n        0x00,\n        0x00, // height\n      ]),\n    );\n  }\n\n  private edts(track: MP4Track) {\n    return makeBox(getCharCode('edts'), this.elst(track));\n  }\n\n  private elst(track: MP4Track) {\n    return makeBox(\n      getCharCode('elst'),\n      new Uint8Array([\n        0x00, // version\n        0x00,\n        0x00,\n        0x00, // flags\n        ...toHexadecimal(1), // entry_count\n        ...toHexadecimal(track.duration),\n        ...toHexadecimal(track.implicitOffset * Math.floor(track.duration / track.samples.length)),\n        0x00,\n        0x01, // media_rate_integer\n        0x00,\n        0x00, // media_rate_integer\n      ]),\n    );\n  }\n\n  private mdia(track: MP4Track) {\n    return makeBox(getCharCode('mdia'), this.mdhd(), this.hdlr(), this.minf(track));\n  }\n\n  private mdhd() {\n    return makeBox(\n      getCharCode('mdhd'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        ...toHexadecimal(CORRECTION_UTC), // creation_time\n        ...toHexadecimal(CORRECTION_UTC), // modification_time\n        ...toHexadecimal(this.param.timescale), // timescale\n        ...toHexadecimal(0), // duration\n        0x55,\n        0xc4, // 'und' language (undetermined)\n        0x00,\n        0x00,\n      ]),\n    );\n  }\n\n  private hdlr() {\n    return makeBox(\n      getCharCode('hdlr'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        0x76,\n        0x69,\n        0x64,\n        0x65, // handler_type: 'vide'\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x56,\n        0x69,\n        0x64,\n        0x65,\n        0x6f,\n        0x48,\n        0x61,\n        0x6e,\n        0x64,\n        0x6c,\n        0x65,\n        0x72,\n        0x00, // name: 'VideoHandler'\n      ]),\n    );\n  }\n\n  private minf(track: MP4Track) {\n    return makeBox(getCharCode('minf'), this.vmhd(), this.dinf(), this.stbl(track));\n  }\n\n  private vmhd() {\n    return makeBox(\n      getCharCode('vmhd'),\n      new Uint8Array([\n        0x00, // version\n        0x00,\n        0x00,\n        0x01, // flags\n        0x00,\n        0x00, // graphicsmode\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // opcolor\n      ]),\n    );\n  }\n\n  private dinf() {\n    return makeBox(getCharCode('dinf'), this.dref());\n  }\n\n  private dref() {\n    return makeBox(\n      getCharCode('dref'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x01, // entry_count\n        0x00,\n        0x00,\n        0x00,\n        0x0c, // entry_size\n        0x75,\n        0x72,\n        0x6c,\n        0x20, // 'url' type\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x01, // entry_flags\n      ]),\n    );\n  }\n\n  private stbl(track: MP4Track) {\n    return makeBox(\n      getCharCode('stbl'),\n      this.stsd(track),\n      this.stts(track),\n      this.ctts(track),\n      this.stss(track),\n      this.stsc(),\n      this.stsz(),\n      this.stco(),\n    );\n  }\n\n  private stsd(track: MP4Track) {\n    const data = [\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01, // entry_count\n    ];\n    return makeBox(getCharCode('stsd'), new Uint8Array(data), this.avc1(track));\n  }\n\n  private avc1(track: MP4Track) {\n    const data = [\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01, // data_reference_index\n      0x00,\n      0x00, // pre_defined\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      (track.width >> 8) & 0xff,\n      track.width & 0xff, // width\n      (track.height >> 8) & 0xff,\n      track.height & 0xff, // height\n      0x00,\n      0x48,\n      0x00,\n      0x00, // horizresolution\n      0x00,\n      0x48,\n      0x00,\n      0x00, // vertresolution\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01, // frame_count\n      0x12,\n      0x62,\n      0x69,\n      0x6e,\n      0x65, // binelpro.ru\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // compressorname\n      0x00,\n      0x18, // depth = 24\n      0xff,\n      0xff,\n    ];\n    return makeBox(getCharCode('avc1'), new Uint8Array(data), this.avcc(track));\n  }\n\n  private avcc(track: MP4Track) {\n    let sps: number[] = [];\n    let pps: number[] = [];\n\n    track.sps.forEach((byteData) => {\n      const len = byteData.length - 4;\n      sps.push((len >>> 8) & 0xff);\n      sps.push(len & 0xff);\n      sps = sps.concat(Array.prototype.slice.call(new Uint8Array(byteData.data.data(), 4)));\n    });\n    track.pps.forEach((byteData) => {\n      const len = byteData.length - 4;\n      pps.push((len >>> 8) & 0xff);\n      pps.push(len & 0xff);\n      pps = pps.concat(Array.prototype.slice.call(new Uint8Array(byteData.data.data(), 4)));\n    });\n\n    const data = [\n      0x01, // version\n      sps[3], // profile\n      sps[4], // profile compat\n      sps[5], // level\n      0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n      0xe0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\n    ]\n      .concat(sps)\n      .concat([track.pps.length]) // numOfPictureParameterSets\n      .concat(pps);\n\n    return makeBox(getCharCode('avcC'), new Uint8Array(data));\n  }\n\n  private stts(track: MP4Track) {\n    return makeBox(\n      getCharCode('stts'),\n      new Uint8Array([\n        0x00, // version\n        0x00,\n        0x00,\n        0x00, // flags\n        ...toHexadecimal(1), // entry_count\n        ...toHexadecimal(track.samples.length), // sample_count\n        ...toHexadecimal(Math.floor(track.duration / track.samples.length)), // sample_offset\n      ]),\n    );\n  }\n\n  private ctts(track: MP4Track) {\n    const sampleCount = track.pts.length;\n    const sampleDelta = Math.floor(track.duration / sampleCount);\n    const data = [\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      ...toHexadecimal(sampleCount), // entry_count\n    ];\n    for (let i = 0; i < sampleCount; i++) {\n      data.push(...toHexadecimal(1)); // sample_count\n      const dts = i * sampleDelta;\n      const pts = (track.pts[i] + track.implicitOffset) * sampleDelta;\n      data.push(...toHexadecimal(pts - dts)); // sample_offset\n    }\n    return makeBox(getCharCode('ctts'), new Uint8Array(data));\n  }\n\n  private stss(track: MP4Track) {\n    const iFrames = track.samples.filter((sample) => sample.flags.isKeyFrame).map((sample) => sample.index + 1);\n    const data = [\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      ...toHexadecimal(iFrames.length),\n    ];\n    iFrames.forEach((iFrame) => {\n      data.push(...toHexadecimal(iFrame));\n    });\n    return makeBox(getCharCode('stss'), new Uint8Array(data));\n  }\n\n  private stsc() {\n    return makeBox(\n      getCharCode('stsc'),\n      new Uint8Array([\n        0x00, // version\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00, // entry_count\n      ]),\n    );\n  }\n\n  private stsz() {\n    return makeBox(\n      getCharCode('stsz'),\n      new Uint8Array([\n        0x00, // version\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00, // sample_size\n        0x00,\n        0x00,\n        0x00,\n        0x00, // sample_count\n      ]),\n    );\n  }\n\n  private stco() {\n    return makeBox(\n      getCharCode('stco'),\n      new Uint8Array([\n        0x00, // version\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00, // entry_count\n      ]),\n    );\n  }\n\n  private mvex() {\n    const trexs = this.param.tracks.map((track) => this.trex(track)).reverse();\n    return makeBox(getCharCode('mvex'), ...trexs);\n  }\n\n  private trex(track: MP4Track) {\n    return makeBox(\n      getCharCode('trex'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        track.id >> 24,\n        (track.id >> 16) & 0xff,\n        (track.id >> 8) & 0xff,\n        track.id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x01, // default_sample_description_index\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_duration\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_size\n        0x00,\n        0x01,\n        0x00,\n        0x01, // default_sample_flags\n      ]),\n    );\n  }\n\n  private mfhd() {\n    return makeBox(\n      getCharCode('mfhd'),\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00,\n        0x00, // flags\n        this.param.sequenceNumber >> 24,\n        (this.param.sequenceNumber >> 16) & 0xff,\n        (this.param.sequenceNumber >> 8) & 0xff,\n        this.param.sequenceNumber & 0xff, // sequence_number\n      ]),\n    );\n  }\n\n  private traf() {\n    const sdtp = this.sdtp();\n    this.param.offset = sdtp.length + 72; // tfhd + tfdt + traf header + mfhd + moof header + mdat header\n    return makeBox(getCharCode('traf'), this.tfhd(), this.tfdt(), this.trun(), sdtp);\n  }\n\n  private tfhd() {\n    return makeBox(\n      getCharCode('tfhd'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        ...toHexadecimal(this.param.track.id), // track_ID\n      ]),\n    );\n  }\n\n  private tfdt() {\n    return makeBox(\n      getCharCode('tfdt'),\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        ...toHexadecimal(this.param.baseMediaDecodeTime), // baseMediaDecodeTime\n      ]),\n    );\n  }\n\n  private trun() {\n    const samples = this.param.track.samples || [];\n    const len = samples.length;\n    const arraylen = 12 + 16 * len;\n    this.param.offset += 8 + arraylen;\n    const data = [\n      0x00, // version 0\n      0x00,\n      0x0f,\n      0x01, // flags\n      ...toHexadecimal(len), // sample_count\n      ...toHexadecimal(this.param.offset), // data_offset\n    ];\n    this.param.track.samples.forEach((sample) => {\n      const paddingValue = 0;\n      const { duration, size, flags, cts } = sample;\n      data.push(...toHexadecimal(duration)); // sample_duration\n      data.push(...toHexadecimal(size)); // sample_size\n      data.push((flags.isLeading << 2) | flags.dependsOn);\n      data.push((flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | (paddingValue << 1) | flags.isNonSync);\n      data.push(flags.degradPrio & (0xf0 << 8));\n      data.push(flags.degradPrio & 0x0f); // sample_flags\n      data.push(...toHexadecimal(cts)); // sample_composition_time_offset\n    });\n    return makeBox(getCharCode('trun'), new Uint8Array(data));\n  }\n\n  private sdtp() {\n    const buffer = new Uint8Array(4 + this.param.track.samples.length);\n    this.param.track.samples.forEach((sample, index) => {\n      buffer[index + 4] = (sample.flags.dependsOn << 4) | (sample.flags.isDependedOn << 2) | sample.flags.hasRedundancy;\n    });\n    return makeBox(getCharCode('sdtp'), buffer);\n  }\n}\n","import { VideoFrame } from '../base/video-frame';\nimport { VideoSequence } from '../base/video-sequence';\nimport { concatUint8Arrays } from '../codec/utils/byte-utils';\nimport { IS_IOS } from '../constant';\nimport { BoxParam, MP4Generator, MP4Track } from './mp4-generator';\n\nconst SEQUENCE_NUMBER = 1;\nconst BASE_MEDIA_DECODE_TIME = 0;\nconst BASE_MEDIA_TIME_SCALE = 6000;\n\nexport const coverToMp4 = (videoSequence: VideoSequence) => {\n  const sequence = IS_IOS ? getVirtualSequence(videoSequence) : videoSequence;\n  const mp4Track = makeMp4Track(sequence);\n  if (!mp4Track || mp4Track.len === 0) throw new Error('mp4Track is empty');\n  const boxParam: BoxParam = {\n    offset: 0,\n    tracks: [mp4Track],\n    track: mp4Track,\n    duration: mp4Track.duration,\n    timescale: mp4Track.timescale,\n    sequenceNumber: SEQUENCE_NUMBER,\n    baseMediaDecodeTime: BASE_MEDIA_DECODE_TIME,\n    nalusBytesLen: mp4Track.len,\n    videoSequence: sequence,\n  };\n  const mp4Generator = new MP4Generator(boxParam);\n  const ftyp = mp4Generator.ftyp();\n  const moov = mp4Generator.moov();\n  const moof = mp4Generator.moof();\n  const mdat = mp4Generator.mdat();\n\n  return concatUint8Arrays([ftyp, moov, moof, mdat]);\n};\n\nconst makeMp4Track = (videoSequence: VideoSequence) => {\n  if (videoSequence.headers.length < 2) throw new Error('Bad header data in video sequence!');\n  if (videoSequence.frames.length === 0) throw new Error('There is no frame data in the video sequence!');\n  const mp4Track: MP4Track = {\n    id: 1,\n    type: 'video',\n    timescale: BASE_MEDIA_TIME_SCALE,\n    duration: Math.floor((videoSequence.frames.length * BASE_MEDIA_TIME_SCALE) / videoSequence.frameRate),\n    width: videoSequence.getVideoWidth(),\n    height: videoSequence.getVideoHeight(),\n    sps: [videoSequence.headers[0]],\n    pps: [videoSequence.headers[1]],\n    implicitOffset: getImplicitOffset(videoSequence.frames),\n    len: 0,\n    pts: [],\n    samples: [],\n  };\n\n  const headerLen = videoSequence.headers.reduce((pre, cur) => pre + cur.length, 0);\n  const sampleDelta = mp4Track.duration / videoSequence.frames.length;\n  videoSequence.frames.forEach((frame, index) => {\n    let sampleSize = frame.fileBytes.length ?? 0;\n    if (index === 0) {\n      sampleSize += headerLen;\n    }\n    mp4Track.len += sampleSize;\n    mp4Track.pts.push(frame.frame);\n    mp4Track.samples.push({\n      index,\n      size: sampleSize,\n      duration: sampleDelta,\n      cts: (frame.frame + mp4Track.implicitOffset - index) * sampleDelta,\n      flags: {\n        isKeyFrame: frame.isKeyframe,\n        isNonSync: frame.isKeyframe ? 0 : 1,\n        dependsOn: frame.isKeyframe ? 2 : 1,\n        isLeading: 0,\n        isDependedOn: 0,\n        hasRedundancy: 0,\n        degradPrio: 0,\n      },\n    });\n  });\n  return mp4Track;\n};\n\nconst getImplicitOffset = (videoFrames: VideoFrame[]) => {\n  return Math.max(...videoFrames.map((videoFrame, index) => index - videoFrame.frame));\n};\n\nconst getVirtualSequence = (videoSequence: VideoSequence): VideoSequence => {\n  const len = videoSequence.frames.length;\n  for (let index = 0; index < videoSequence.frames.length; index++) {\n    const frame = { ...videoSequence.frames[index] };\n    if (frame.isKeyframe && index > 0) {\n      break;\n    }\n    frame.frame += len;\n    videoSequence.frames.push(frame);\n  }\n  return videoSequence;\n};\n","type K = keyof HTMLVideoElementEventMap;\n\nlet eventHandlers: {\n  [key in K]?: {\n    node: HTMLVideoElement;\n    handler: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => void;\n    capture: boolean;\n  }[];\n} = {};\n\nexport const addListener = (\n  node: HTMLVideoElement,\n  event: K,\n  handler: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => void,\n  capture = false,\n) => {\n  if (!(event in eventHandlers)) {\n    eventHandlers[event] = [];\n  }\n  eventHandlers[event]?.push({ node: node, handler: handler, capture: capture });\n  node.addEventListener(event, handler, capture);\n};\n\nexport const removeListener = (\n  targetNode: HTMLElement,\n  event: K,\n  targetHandler?: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => void,\n) => {\n  if (!(event in eventHandlers)) return;\n  if (targetHandler) {\n    eventHandlers[event]\n      ?.filter(({ node, handler }) => node === targetNode && handler === targetHandler)\n      .forEach(({ node, handler, capture }) => node.removeEventListener(event, handler, capture));\n    eventHandlers[event] = eventHandlers[event]?.filter(\n      ({ node, handler }) => !(node === targetNode && handler === targetHandler),\n    );\n  } else {\n    eventHandlers[event]\n      ?.filter(({ node }) => node === targetNode)\n      .forEach(({ node, handler, capture }) => node.removeEventListener(event, handler, capture));\n    eventHandlers[event] = eventHandlers[event]?.filter(({ node }) => node !== targetNode);\n  }\n};\n\nexport const removeAllListeners = (targetNode: HTMLElement) => {\n  Object.keys(eventHandlers).forEach((event) => {\n    const videoEvent = event as K;\n    eventHandlers[videoEvent]\n      ?.filter(({ node }) => node === targetNode)\n      .forEach(({ node, handler, capture }) => node.removeEventListener(videoEvent, handler, capture));\n\n    eventHandlers[videoEvent] = eventHandlers[videoEvent]?.filter(({ node }) => node !== targetNode);\n  });\n};\n","import { Clock } from '../base/utils/clock';\nimport { destroyVerify } from '../decorators';\nimport { coverToMp4 } from '../generator/mp4-box-helper';\nimport { getWechatNetwork } from './utils';\nimport { addListener, removeAllListeners, removeListener } from './video-listener';\n\nimport type { VideoSequence } from '../base/video-sequence';\n\ndeclare global {\n  interface Window {\n    WeixinJSBridge?: any;\n  }\n}\n\ntype K = keyof HTMLVideoElementEventMap;\n\nconst IS_WECHAT = navigator && /MicroMessenger/i.test(navigator.userAgent);\n\nconst playVideoElement = async (videoElement: HTMLVideoElement) => {\n  if (IS_WECHAT && window.WeixinJSBridge) {\n    await getWechatNetwork();\n  }\n  try {\n    await videoElement.play();\n  } catch (error: any) {\n    throw new Error(error.message);\n  }\n};\n\n@destroyVerify\nexport class VideoReader {\n  public static create(videoSequence: VideoSequence) {\n    const videoReader = new VideoReader(videoSequence);\n    const debugData = videoReader.load(videoSequence);\n    return { videoReader: videoReader, debugData: debugData };\n  }\n\n  protected destroyed = false;\n  protected frameRate = 0;\n\n  private _duration: number;\n  private videoElement: HTMLVideoElement | undefined;\n\n  public constructor(videoSequence: VideoSequence) {\n    this._duration = videoSequence.frameCount / videoSequence.frameRate;\n    this.frameRate = videoSequence.frameRate;\n  }\n\n  public getVideoElement(): HTMLVideoElement {\n    return this.videoElement as HTMLVideoElement;\n  }\n\n  public progress() {\n    return Math.round((this.videoElement!.currentTime / this._duration) * 100) / 100;\n  }\n\n  public duration() {\n    return this._duration;\n  }\n\n  public currentTime() {\n    return this.videoElement!.currentTime || 0;\n  }\n\n  public start() {\n    return playVideoElement(this.videoElement as HTMLVideoElement);\n  }\n\n  public pause() {\n    this.videoElement?.pause();\n  }\n\n  public seek(time: number) {\n    return new Promise<void>((resolve) => {\n      const seekCallback = () => {\n        removeListener(this.videoElement as HTMLVideoElement, 'seeked', seekCallback);\n        resolve();\n      };\n      addListener(this.videoElement as HTMLVideoElement, 'seeked', seekCallback);\n      this.videoElement!.currentTime = time;\n    });\n  }\n\n  public addListener(event: K, handler: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => void) {\n    addListener(this.videoElement as HTMLVideoElement, event, handler);\n  }\n\n  public removeAllListeners() {\n    removeAllListeners(this.videoElement as HTMLVideoElement);\n  }\n\n  public getFrameData(callback: any): any {\n    // NOP\n  }\n\n  public clearCallback() {\n    // NOP\n  }\n\n  public destroy() {\n    this.removeAllListeners();\n    this.videoElement = undefined;\n    this.destroyed = true;\n  }\n\n  protected load(videoSequence: VideoSequence): any {\n    this.videoElement = document.createElement('video');\n    this.videoElement.style.display = 'none';\n    this.videoElement.muted = true;\n    this.videoElement.playsInline = true;\n    const clock = new Clock();\n    const mp4Data = coverToMp4(videoSequence);\n    clock.mark('coverMP4');\n    this.videoElement.src = URL.createObjectURL(new Blob([mp4Data], { type: 'video/mp4' }));\n    this.videoElement.load();\n    return {\n      coverMP4: clock.measure('', 'coverMP4'),\n    };\n  }\n}\n","import { Context, RenderOptions } from './context';\nimport { getWechatNetwork } from './utils';\nimport { EventName } from '../types';\nimport { IS_IOS } from '../constant';\nimport { destroyVerify } from '../decorators';\n\nimport type { PAGFile } from '../pag-file';\nimport { VideoReader } from './video-reader';\nimport { VideoSequence } from '../base/video-sequence';\nimport { Clock } from '../base/utils/clock';\n\ndeclare global {\n  interface Window {\n    WeixinJSBridge?: any;\n  }\n}\n\nconst IS_WECHAT = navigator && /MicroMessenger/i.test(navigator.userAgent);\n\nexport const playVideoElement = async (videoElement: HTMLVideoElement) => {\n  if (IS_WECHAT && window.WeixinJSBridge) {\n    await getWechatNetwork();\n  }\n  try {\n    await videoElement.play();\n  } catch (error: any) {\n    throw new Error(error.message);\n  }\n};\n\n@destroyVerify\nexport class View extends Context {\n  protected videoReader: VideoReader;\n  protected fpsBuffer: number[] = [];\n  protected currentFrame = -1;\n  protected needSeek = false;\n\n  public constructor(pagFile: PAGFile, canvas: HTMLCanvasElement, options: RenderOptions) {\n    super(pagFile, canvas, options);\n    this.videoReader = this.createVideoReader(this.videoSequence);\n  }\n\n  /**\n   * 开始播放\n   */\n  public async play() {\n    if (this.playing) return;\n    this.playing = true;\n    await this.videoReader.start();\n    await this.flushLoop();\n    if (this.getProgress() === 0) {\n      this.eventManager.emit(EventName.onAnimationStart);\n    }\n    this.eventManager.emit(EventName.onAnimationPlay);\n  }\n  /**\n   * 暂停播放\n   */\n  public pause() {\n    if (!this.playing) return;\n    this.videoReader.pause();\n    this.clearTimer();\n    this.playing = false;\n    this.eventManager.emit(EventName.onAnimationPause);\n  }\n  /**\n   * 停止播放\n   */\n  public stop() {\n    this.videoReader.pause();\n    this.videoReader.seek(0);\n    this.clearRender();\n    this.playing = false;\n    this.eventManager.emit(EventName.onAnimationCancel);\n  }\n  /**\n   * 销毁播放实例\n   */\n  public destroy() {\n    this.clearTimer();\n    this.clearRender();\n    this.canvas = null;\n    this.videoReader.destroy();\n    this.destroyed = true;\n  }\n  /**\n   * 返回当前播放进度位置，取值范围为 0.0 到 1.0。\n   */\n  public getProgress() {\n    return this.currentFrame / this.videoSequence.frameCount;\n  }\n  /**\n   * 设置播放进度位置，取值范围为 0.0 到 1.0。\n   */\n  public setProgress(progress: number) {\n    if (progress < 0 || progress > 1) throw new Error('progress must be between 0.0 and 1.0!');\n    const currentFrame = Math.round(progress * this.videoSequence.frameCount);\n    if (this.currentFrame !== currentFrame) {\n      this.needSeek = true;\n      this.currentFrame = currentFrame;\n    }\n  }\n  /**\n   * 渲染当前进度画面\n   */\n  public flush() {\n    return this.flushInternal(true);\n  }\n\n  protected draw() {}\n\n  protected createVideoReader(videoSequence: VideoSequence) {\n    const { videoReader, debugData } = VideoReader.create(videoSequence);\n    this.setDebugData(debugData);\n    if (!IS_IOS) {\n      videoReader.addListener('ended', () => {\n        this.repeat();\n      });\n    }\n    return videoReader;\n  }\n\n  protected async repeat() {\n    // 循环结束\n    if (this.repeatCount === 0) {\n      this.setProgress(1);\n      await this.flushInternal(true);\n      this.videoReader.pause();\n      this.clearTimer();\n      this.playing = false;\n      this.eventManager.emit('onAnimationEnd');\n      return false;\n    }\n    // 次数循环\n    this.repeatCount -= 1;\n    if (IS_IOS) {\n      await this.videoReader.seek(0);\n    } else {\n      this.videoReader.start();\n    }\n    this.eventManager.emit('onAnimationRepeat');\n    return true;\n  }\n\n  protected flushLoop() {\n    this.renderTimer = window.requestAnimationFrame(() => {\n      this.flushLoop();\n    });\n    if (IS_IOS && this.duration() - this.videoReader.currentTime() <= 1 / this.frameRate()) {\n      this.repeat();\n    }\n    return this.flushInternal(false);\n  }\n\n  protected clearTimer() {\n    if (this.renderTimer) {\n      window.cancelAnimationFrame(this.renderTimer);\n      this.renderTimer = null;\n    }\n  }\n\n  protected updateFPS() {\n    let now: number;\n    try {\n      now = performance.now();\n    } catch (e) {\n      now = Date.now();\n    }\n    this.fpsBuffer = this.fpsBuffer.filter((value) => now - value <= 1000);\n    this.fpsBuffer.push(now);\n    this.setDebugData({ FPS: this.fpsBuffer.length });\n  }\n\n  protected async flushInternal(sync: boolean) {\n    const clock = new Clock();\n    if (this.needSeek) {\n      if (sync) {\n        await this.videoReader.seek(this.currentFrame / this.frameRate());\n      } else {\n        this.videoReader.seek(this.currentFrame / this.frameRate());\n      }\n      this.needSeek = false;\n    } else {\n      this.currentFrame = Math.floor(this.videoReader.currentTime() * this.frameRate());\n    }\n    this.draw();\n    clock.mark('draw');\n    this.setDebugData({ draw: clock.measure('', 'draw') });\n    this.updateFPS();\n    this.eventManager.emit(EventName.onAnimationUpdate);\n  }\n}\n","import { destroyVerify } from '../decorators';\nimport { PAGFile } from '../pag-file';\nimport { RenderOptions } from './context';\nimport { View } from './view';\n\n@destroyVerify\nexport class PAG2dView extends View {\n  private context: CanvasRenderingContext2D;\n  private renderCanvas2D: HTMLCanvasElement;\n  private renderCanvas2DContext: CanvasRenderingContext2D;\n\n  public constructor(pagFile: PAGFile, canvas: HTMLCanvasElement, options: RenderOptions) {\n    super(pagFile, canvas, options);\n    const context = this.canvas?.getContext('2d');\n    if (!context) throw new Error(\"Can't get 2d context!\");\n    this.context = context;\n    this.renderCanvas2D = document.createElement('canvas');\n    this.renderCanvas2D.width = this.videoParam.MP4Width;\n    this.renderCanvas2D.height = this.videoParam.MP4Height;\n    const renderCanvas2DContext = this.renderCanvas2D.getContext('2d');\n    if (!renderCanvas2DContext) throw new Error(\"Can't get 2d context!\");\n    this.renderCanvas2DContext = renderCanvas2DContext;\n  }\n\n  protected override draw() {\n    if (this.videoParam.hasAlpha) {\n      this.renderCanvas2DContext.clearRect(0, 0, this.renderCanvas2D.width, this.renderCanvas2D.height);\n      this.renderCanvas2DContext.drawImage(\n        this.videoReader.getVideoElement(),\n        0,\n        0,\n        this.renderCanvas2D.width,\n        this.renderCanvas2D.height,\n      );\n      const frameOne = this.renderCanvas2DContext.getImageData(\n        0,\n        0,\n        this.videoParam.sequenceWidth,\n        this.videoParam.sequenceHeight,\n      );\n      const frameTwo = this.renderCanvas2DContext.getImageData(\n        this.videoParam.alphaStartX,\n        this.videoParam.alphaStartY,\n        this.videoParam.sequenceWidth,\n        this.videoParam.sequenceHeight,\n      );\n      const length = frameOne.data.length / 4;\n      for (let i = 0; i < length; i++) {\n        frameOne.data[i * 4 + 3] = frameTwo.data[i * 4 + 0];\n      }\n      this.renderCanvas2DContext.clearRect(0, 0, this.renderCanvas2D.width, this.renderCanvas2D.height);\n      this.renderCanvas2DContext.putImageData(\n        frameOne,\n        0,\n        0,\n        0,\n        0,\n        this.videoParam.sequenceWidth,\n        this.videoParam.sequenceHeight,\n      );\n      this.context.clearRect(0, 0, this.canvas!.width, this.canvas!.height);\n      this.context.drawImage(\n        this.renderCanvas2D,\n        0,\n        0,\n        this.videoParam.sequenceWidth,\n        this.videoParam.sequenceHeight,\n        this.viewportSize.x,\n        this.viewportSize.y,\n        this.viewportSize.width,\n        this.viewportSize.height,\n      );\n    } else {\n      this.context.drawImage(\n        this.videoReader.getVideoElement(),\n        0,\n        0,\n        this.videoParam.MP4Width,\n        this.videoParam.MP4Height,\n        this.viewportSize.x,\n        this.viewportSize.y,\n        this.viewportSize.width,\n        this.viewportSize.height,\n      );\n    }\n  }\n\n  protected override clearRender() {\n    this.context.clearRect(0, 0, this.canvas!.width, this.canvas!.height);\n  }\n}\n","export const VERTEX_2D_SHADER = `\n      attribute vec2 a_position;\n      attribute vec2 a_texCoord;\n      \n      uniform vec2 u_resolution;\n      uniform vec2 u_scale;\n      \n      varying vec2 v_texCoord;\n    \n      \n      void main() {\n         // convert the rectangle from pixels to 0.0 to 1.0\n         vec2 zeroToOne = a_position / u_resolution;\n      \n         // convert from 0->1 to 0->2\n         vec2 zeroToTwo = zeroToOne * 2.0;\n      \n         // convert from 0->2 to -1->+1 (clipspace)\n         vec2 clipSpace = zeroToTwo - 1.0;\n      \n         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n      \n         // pass the texCoord to the fragment shader\n         // The GPU will interpolate this value between points.\n         v_texCoord = a_texCoord / u_scale;\n      }\n        `;\n\nexport const FRAGMENT_2D_SHADER = `\n      precision mediump float;\n      // our texture\n      uniform sampler2D u_image;\n      \n      // the texCoords passed in from the vertex shader.\n      varying vec2 v_texCoord;\n      \n      void main() {\n         gl_FragColor = texture2D(u_image, v_texCoord);\n      }\n         `;\nexport const FRAGMENT_2D_SHADER_TRANSPARENT = `\n      precision mediump float;\n      // our texture\n      uniform sampler2D u_image;\n      \n      // the texCoords passed in from the vertex shader.\n      varying vec2 v_texCoord;\n      uniform vec2 v_alphaStart;\n      \n      void main() {\n         vec4 color = texture2D(u_image, v_texCoord);\n         vec4 alpha = texture2D(u_image, vec2(v_texCoord.x + v_alphaStart.x, v_texCoord.y + v_alphaStart.y));\n         gl_FragColor = vec4(color.rgb * alpha.r, alpha.r);\n      }     \n         `;\n","import { WEBGL_CONTEXT_ATTRIBUTES } from '../constant';\nimport { destroyVerify } from '../decorators';\nimport { PAGFile } from '../pag-file';\nimport { RenderOptions } from './context';\nimport { FRAGMENT_2D_SHADER, FRAGMENT_2D_SHADER_TRANSPARENT, VERTEX_2D_SHADER } from './shader';\nimport { createAndSetupTexture, createProgram, detectWebGLContext, getShaderSourceFromString } from './utils';\nimport { View } from './view';\n\n@destroyVerify\nexport class PAGWebGLView extends View {\n  protected gl: WebGLRenderingContext;\n  protected scale: { x: number; y: number } = { x: 1, y: 1 };\n\n  private program: WebGLProgram;\n  private positionLocation = 0;\n  private texcoordLocation = 0;\n  private alphaStartLocation: WebGLUniformLocation | null = null;\n  private scaleLocation: WebGLUniformLocation | null = null;\n  private resolutionLocation: WebGLUniformLocation | null = null;\n  private positionBuffer: WebGLBuffer | null = null;\n  private texcoordBuffer: WebGLBuffer | null = null;\n  private originalVideoTexture: WebGLTexture | null = null;\n  private renderingTexture: WebGLTexture | null = null;\n  private renderingFbo: WebGLFramebuffer | null = null;\n\n  public constructor(pagFile: PAGFile, canvas: HTMLCanvasElement, options: RenderOptions) {\n    super(pagFile, canvas, options);\n    const gl = this.canvas?.getContext('webgl', {\n      ...WEBGL_CONTEXT_ATTRIBUTES,\n    });\n    if (!gl) throw new Error(\"Can't get WebGL context!\");\n    this.gl = gl;\n    if (this.videoParam.hasAlpha) {\n      this.program = createProgram(\n        this.gl,\n        getShaderSourceFromString(VERTEX_2D_SHADER),\n        getShaderSourceFromString(FRAGMENT_2D_SHADER_TRANSPARENT),\n      );\n    } else {\n      this.program = createProgram(\n        this.gl,\n        getShaderSourceFromString(VERTEX_2D_SHADER),\n        getShaderSourceFromString(FRAGMENT_2D_SHADER),\n      );\n    }\n    this.loadContext();\n  }\n\n  protected override loadContext() {\n    // look up where the vertex data needs to go.\n    if (!this.program) throw new Error('program is not initialized');\n    this.positionLocation = this.gl.getAttribLocation(this.program, 'a_position');\n    if (this.positionLocation === -1) throw new Error('unable to get attribute location for a_position');\n    this.scaleLocation = this.gl.getUniformLocation(this.program, 'u_scale');\n    if (this.scaleLocation === -1) throw new Error('unable to get attribute location for u_scale');\n    this.texcoordLocation = this.gl.getAttribLocation(this.program, 'a_texCoord');\n    if (this.texcoordLocation === -1) throw new Error('unable to get attribute location for a_texCoord');\n    if (this.videoParam.hasAlpha) {\n      this.alphaStartLocation = this.gl.getUniformLocation(this.program, 'v_alphaStart');\n      if (!this.alphaStartLocation) throw new Error('unable to get attribute location for v_alphaStart');\n    }\n    this.resolutionLocation = this.gl.getUniformLocation(this.program, 'u_resolution');\n    if (this.positionLocation === -1) throw new Error('unable to get attribute location for u_resolution');\n\n    // Create a buffer to put three 2d clip space points in\n    this.positionBuffer = this.gl.createBuffer();\n\n    // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n    // Set a rectangle the same size as the image.\n    this.setRectangle(this.gl, 0, 0, this.videoParam.MP4Width, this.videoParam.MP4Height);\n\n    // provide texture coordinates for the rectangle.\n    this.texcoordBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);\n    this.gl.bufferData(\n      this.gl.ARRAY_BUFFER,\n      new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]),\n      this.gl.STATIC_DRAW,\n    );\n\n    // Create texture and attach them to framebuffer.\n    this.renderingTexture = createAndSetupTexture(this.gl);\n    // make the texture the same size as the sequence.\n    this.gl.texImage2D(\n      this.gl.TEXTURE_2D,\n      0,\n      this.gl.RGBA,\n      this.videoParam.sequenceWidth,\n      this.videoParam.sequenceHeight,\n      0,\n      this.gl.RGBA,\n      this.gl.UNSIGNED_BYTE,\n      null,\n    );\n    // Create a framebuffer\n    this.renderingFbo = this.gl.createFramebuffer();\n    if (!this.renderingFbo) throw new Error('unable to create framebuffer');\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.renderingFbo);\n    // Attach a texture to it.\n    this.gl.framebufferTexture2D(\n      this.gl.FRAMEBUFFER,\n      this.gl.COLOR_ATTACHMENT0,\n      this.gl.TEXTURE_2D,\n      this.renderingTexture,\n      0,\n    );\n\n    // Create a texture and put the video in it.\n    this.originalVideoTexture = createAndSetupTexture(this.gl);\n  }\n\n  protected override draw() {\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.originalVideoTexture);\n    // Upload the video into the texture.\n    this.texImage2D();\n    // Clear the canvas\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    // Tell it to use our program (pair of shaders)\n    this.gl.useProgram(this.program);\n\n    // Turn on the position attribute\n    this.gl.enableVertexAttribArray(this.positionLocation);\n\n    // Bind the position buffer\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\n\n    // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n    const size = 2; // 2 components per iteration\n    const type: number = this.gl.FLOAT; // the data is 32bit floats\n    const normalize = false; // don't normalize the data\n    const stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\n    const offset = 0; // start at the beginning of the buffer\n    this.gl.vertexAttribPointer(this.positionLocation, size, type, normalize, stride, offset);\n\n    // Turn on the teccord attribute\n    this.gl.enableVertexAttribArray(this.texcoordLocation);\n\n    // Bind the position buffer.\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);\n\n    this.gl.vertexAttribPointer(this.texcoordLocation, size, type, normalize, stride, offset);\n\n    if (this.videoParam.hasAlpha) {\n      this.gl.uniform2f(\n        this.alphaStartLocation,\n        this.videoParam.alphaStartX / this.videoParam.MP4Width / this.scale.x,\n        this.videoParam.alphaStartY / this.videoParam.MP4Height / this.scale.y,\n      );\n    }\n\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.originalVideoTexture);\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.renderingFbo);\n    this.gl.uniform2f(this.resolutionLocation, this.videoParam.sequenceWidth, this.videoParam.sequenceHeight);\n    this.gl.uniform2f(this.scaleLocation, this.scale.x, this.scale.y);\n    console.log('aaa this.videoParam.sequenceWidth: '+ JSON.stringify(this.videoParam.sequenceWidth));\n    console.log('aaa this.videoParam.sequenceHeight: '+ JSON.stringify(this.videoParam.sequenceHeight));\n    this.gl.viewport(0, 0, this.videoParam.sequenceWidth, this.videoParam.sequenceHeight);\n    const primitiveType: number = this.gl.TRIANGLES;\n    const count = 6;\n    this.gl.drawArrays(primitiveType, offset, count);\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    this.gl.uniform2f(this.resolutionLocation, this.videoParam.sequenceWidth, this.videoParam.sequenceHeight);\n    console.log('aaa this.viewportSize.width: '+ JSON.stringify(this.viewportSize.width));\n    console.log('aaa this.viewportSize.height: '+ JSON.stringify(this.viewportSize.height));\n    this.gl.viewport(this.viewportSize.x, this.viewportSize.y, this.viewportSize.width, this.viewportSize.height);\n    // const dpr = window.devicePixelRatio || 1;\n    // debugger\n    // this.gl.viewport(\n    //   this.viewportSize.x * dpr,\n    //   this.viewportSize.y * dpr,\n    //   this.viewportSize.width * dpr,\n    //   this.viewportSize.height * dpr,\n    // );\n    this.gl.drawArrays(primitiveType, offset, count);\n  }\n\n  protected override clearRender() {\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  }\n\n  protected detectWebGLContext() {\n    return detectWebGLContext();\n  }\n\n  protected texImage2D() {\n    this.gl.texImage2D(\n      this.gl.TEXTURE_2D,\n      0,\n      this.gl.RGBA,\n      this.gl.RGBA,\n      this.gl.UNSIGNED_BYTE,\n      this.videoReader.getVideoElement(),\n    );\n  }\n\n  private setRectangle(gl: WebGLRenderingContext, x: number, y: number, width: number, height: number) {\n    const x1: number = x;\n    const x2: number = x + width;\n    const y1: number = y;\n    const y2: number = y + height;\n    // const dpr = window.devicePixelRatio || 1;\n    // const x1: number = x * dpr;\n    // const x2: number = (x + width) * dpr;\n    // const y1: number = y * dpr;\n    // const y2: number = (y + height) * dpr;\n    // debugger\n    console.log('aaa x1: '+ JSON.stringify(x1));\n    console.log('aaa x2: '+ JSON.stringify(x2));\n    console.log('aaa y1: '+ JSON.stringify(y1));\n    console.log('aaa y2: '+ JSON.stringify(y2));\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]), gl.STATIC_DRAW);\n  }\n}\n","import { Clock } from './base/utils/clock';\nimport { PAGFile } from './pag-file';\nimport { RenderingMode } from './types';\nimport { PAG2dView } from './view/pag-2d-view';\nimport { PAGWebGLView } from './view/pag-webgl-view';\n\nimport type { RenderOptions } from './view/context';\nimport type { View } from './view/view';\n\nexport class PAGView {\n  /**\n   * 实例化一个 PAGView 对象\n   * @param data PAG文件数据\n   * @param canvas 渲染画板\n   * @param options 渲染选项\n   * @returns PAGView 对象\n   */\n  public static init(data: ArrayBuffer, canvas: HTMLCanvasElement, options: RenderOptions = {}) {\n    const opts = {\n      renderingMode: RenderingMode.WebGL,\n      ...options,\n    };\n    const clock = new Clock();\n    const pagFile = PAGFile.fromArrayBuffer(data);\n    clock.mark('decode');\n    let pagView: View;\n    if (opts.renderingMode === RenderingMode.WebGL) {\n      pagView = new PAGWebGLView(pagFile, canvas, opts);\n    } else {\n      pagView = new PAG2dView(pagFile, canvas, opts);\n    }\n    pagView.setDebugData({ decodePAGFile: clock.measure('', 'decode') });\n    return pagView;\n  }\n}\n"],"names":["CompositionType","TagCode","BlendMode","KeyframeInterpolationType","TrackMatteType","LayerType","Context","EffectType","AttributeType","RenderingMode","EventName","ScaleMode","__spreadValues","__decorateClass"],"mappings":"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"}